name: CI - Minimal Working Pipeline

on:
  push:
    branches: [ main, develop, 'claude/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================================================
  # MINIMAL TEST JOB - Only essential checks
  # ============================================================================
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # Start with single version, add more later when stable
        python-version: ['3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Verify installation
        run: |
          python -c "import sys; print(f'Python {sys.version}')"
          python -c "import pytest; print(f'Pytest {pytest.__version__}')"
          python -c "import aiogram; print(f'Aiogram {aiogram.__version__}')"

      - name: Run minimal tests
        env:
          # Minimal environment for testing
          ENVIRONMENT: "testing"
          BOT_TOKEN: "123456:TEST-TOKEN-FOR-TESTING-ONLY"
          ADMIN_PASSWORD_HASH: "$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewY5jtJRJvL6vxm2"
          SECRET_KEY: "test-secret-key-for-testing-only"
          DATABASE_URL: "sqlite+aiosqlite:///:memory:"
          REDIS_URL: "redis://localhost:6379/1"
          LOG_LEVEL: "WARNING"
          ENABLE_RATE_LIMITING: "false"
          ENABLE_SENTRY: "false"
        run: |
          # Run only minimal tests to start
          pytest tests/test_minimal.py \
            -v \
            --tb=short \
            --no-header \
            --disable-warnings \
            --maxfail=5 \
            --timeout=60

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-*.log

  # ============================================================================
  # MINIMAL SECURITY JOB - Basic checks only
  # ============================================================================
  security:
    name: Security Scanning (Basic)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install minimal security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit (basic)
        run: |
          bandit -r . -ll || echo "⚠️ Bandit found some issues (non-blocking)"
        continue-on-error: true

      - name: Run Safety (basic)
        run: |
          pip install -r requirements.txt
          safety check || echo "⚠️ Safety found some issues (non-blocking)"
        continue-on-error: true

  # ============================================================================
  # LINT JOB - Basic code quality
  # ============================================================================
  lint:
    name: Code Quality (Basic)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Check Python syntax
        run: |
          python -m py_compile bot.py
          python -m py_compile config.py
          echo "✓ Python syntax check passed"

      - name: Check for basic issues
        run: |
          # Just verify files can be imported
          python -c "import ast; ast.parse(open('bot.py').read())"
          python -c "import ast; ast.parse(open('config.py').read())"
          echo "✓ Basic code quality check passed"

  # ============================================================================
  # CI SUMMARY - Only depends on critical test job
  # ============================================================================
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "=== CI Pipeline Summary ==="
          echo "Tests: ${{ needs.test.result }}"
          echo ""

          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "::error::❌ Tests failed - blocking merge"
            exit 1
          fi

          echo "✅ All critical checks passed - ready for merge"

      - name: Post summary
        if: always()
        run: |
          echo "## 🎯 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Critical Checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ **Status:** Ready for merge" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Fix tests before merging" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "Once tests are stable, we'll gradually add:" >> $GITHUB_STEP_SUMMARY
          echo "- Matrix testing (Python 3.10, 3.12)" >> $GITHUB_STEP_SUMMARY
          echo "- Full security scanning" >> $GITHUB_STEP_SUMMARY
          echo "- Docker builds" >> $GITHUB_STEP_SUMMARY
          echo "- Integration tests" >> $GITHUB_STEP_SUMMARY
