name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop, 'claude/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION_DEFAULT: '3.11'

jobs:
  # ============================================================================
  # Code Quality & Linting
  # ============================================================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Black (code formatting)
        run: black --check .
        continue-on-error: true

      - name: Run isort (import sorting)
        run: isort --check-only .
        continue-on-error: true

      - name: Run Flake8 (linting)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=15 --statistics
        continue-on-error: true

      - name: Run MyPy (type checking)
        run: mypy . --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Bandit (security issues)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -ll
        continue-on-error: true

      - name: Run Safety (dependency vulnerabilities)
        run: |
          safety check --json > safety-report.json || true
          safety check
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # ============================================================================
  # Matrix Testing (Multiple Python Versions)
  # ============================================================================
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_bot
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client redis-tools

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify services
        run: |
          redis-cli -h localhost ping
          PGPASSWORD=testpass psql -h localhost -U testuser -d test_bot -c "SELECT 1"

      - name: Run pytest with coverage
        env:
          # Test environment configuration
          ENVIRONMENT: testing
          LOG_LEVEL: DEBUG

          # Database and Redis
          DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/test_bot
          REDIS_URL: redis://localhost:6379/0

          # Bot credentials (test values)
          BOT_TOKEN: "123456:TEST-TOKEN-FOR-TESTING-ONLY-DO-NOT-USE-IN-PROD"
          ADMIN_PASSWORD_HASH: "$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewY5jtJRJvL6vxm2"

          # Security settings
          SECRET_KEY: "test-secret-key-for-testing-only"

          # Feature flags for testing
          ENABLE_RATE_LIMITING: "false"
          ENABLE_SENTRY: "false"
        run: |
          pytest tests/ \
            -v \
            --tb=short \
            --cov=. \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=70 \
            --maxfail=10 \
            --timeout=300 \
            -m "not slow"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: python-${{ matrix.python-version }}
          name: Python ${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  # ============================================================================
  # Integration Tests
  # ============================================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_bot
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/test_bot
          REDIS_URL: redis://localhost:6379/0
          BOT_TOKEN: "test:token"
        run: |
          pytest tests/integration/ -v --tb=short

  # ============================================================================
  # Docker Build & Push
  # ============================================================================
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            telegram-training-bot
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: telegram-training-bot:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # ============================================================================
  # Performance Tests
  # ============================================================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --tb=short
        continue-on-error: true

  # ============================================================================
  # Summary
  # ============================================================================
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    if: always()

    steps:
      - name: Check critical job results
        run: |
          echo "=== CI Pipeline Results ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo ""

          # Check if critical jobs succeeded
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "::warning::Lint checks did not pass"
          fi

          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "::warning::Security scans did not pass"
          fi

          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "::error::Tests failed - this is a critical failure"
            exit 1
          fi

          echo "✅ All critical checks passed!"

      - name: Post summary
        if: always()
        run: |
          echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Critical Checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality (Lint):** ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scanning:** ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit & Integration Tests:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ **All critical checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed. Please review the logs.**" >> $GITHUB_STEP_SUMMARY
          fi
