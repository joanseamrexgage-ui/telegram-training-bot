# ========== TELEGRAM BOT ==========
# Токен бота от @BotFather
BOT_TOKEN=your_bot_token_here

# ID администраторов (через запятую, без пробелов)
ADMIN_IDS=123456789,987654321

# ========== ADMIN PANEL ==========
# PRODUCTION v2.1: Хеш пароля для входа в админ-панель (bcrypt с солью)
# SEC-001 FIX: Используйте bcrypt вместо SHA-256!
#
# ⚠️ ВАЖНО: Храните только хеш, а не сам пароль!
#
# Для генерации нового bcrypt хеша:
#   python generate_admin_hash.py
#
# Пример ниже - bcrypt хеш от "admin123" (НЕ ИСПОЛЬЗУЙТЕ в production!)
# OLD SHA-256 хеши всё ещё поддерживаются для обратной совместимости
ADMIN_PASS_HASH=$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewY5ViT8QJy4E6M6

# ========== DATABASE ==========
# Настройки базы данных

# ВАЖНО: DATABASE_URL - основной параметр для подключения к БД

# Для SQLite (по умолчанию):
DATABASE_URL=sqlite+aiosqlite:///./bot.db

# Для PostgreSQL (раскомментируйте и замените DATABASE_URL):
# DATABASE_URL=postgresql+asyncpg://postgres:your_db_password@localhost:5432/training_bot

# ARCH-003: Production connection pooling settings
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=30
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600

# Дополнительные настройки
DEBUG=False
DB_ECHO=False  # Выводить SQL запросы в лог (только для отладки)

# ========== REDIS HIGH AVAILABILITY (PRODUCTION v3.0) ==========
# BLOCKER-001 FIX: Redis Sentinel для автоматического failover
# Required для production deployment с нулевым downtime

# ========== OPTION 1: SENTINEL HA MODE (RECOMMENDED FOR PRODUCTION) ==========
# Redis Sentinel nodes (comma-separated host:port pairs)
# Для production: минимум 3 Sentinel ноды для кворума
# REDIS_SENTINEL_NODES=sentinel1:26379,sentinel2:26379,sentinel3:26379
# REDIS_MASTER_NAME=mymaster

# ========== OPTION 2: SIMPLE MODE (DEVELOPMENT ONLY) ==========
# Single Redis instance (НЕ РЕКОМЕНДУЕТСЯ для production!)
REDIS_URL=redis://localhost:6379

# Redis database indexes (0-15)
REDIS_FSM_DB=0        # FSM state storage
REDIS_THROTTLE_DB=1   # Rate limiting storage

# Docker Compose автоматически настраивает Sentinel cluster
# Переменные REDIS_SENTINEL_NODES и REDIS_MASTER_NAME устанавливаются в docker-compose.yml

# ========== LOGGING ==========
# Уровень логирования: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# ========== MONITORING ==========
# Sentry DSN for error tracking (optional, but recommended for production)
# Get your DSN from: https://sentry.io/
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# SENTRY_ENVIRONMENT=production
# SENTRY_RELEASE=1.0.0

# ========== BACKUP CONFIGURATION ==========
# Backup retention (days)
# BACKUP_RETENTION_DAYS=30

# AWS S3 for cloud backups (optional)
# BACKUP_S3_BUCKET=your-backup-bucket
# BACKUP_S3_REGION=us-east-1
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key

# Google Drive for backups (optional)
# GDRIVE_FOLDER_ID=your-folder-id

# ========== PRODUCTION v3.0 ENTERPRISE NOTES ==========
# 1. Скопируйте этот файл в .env и заполните своими значениями
# 2. Никогда не коммитьте .env файл в git!
# 3. Используйте СИЛЬНЫЕ bcrypt пароли (python generate_admin_hash.py)
# 4. Для production ОБЯЗАТЕЛЬНО: Redis Sentinel + PostgreSQL
# 5. Redis Sentinel КРИТИЧЕСКИ ВАЖЕН для zero-downtime deployment
# 6. Настройте connection pooling для высокой нагрузки
#
# Enterprise Production Readiness Checklist v3.0:
# ✓ Redis Sentinel HA cluster (3+ nodes) - BLOCKER-001
# ✓ PostgreSQL вместо SQLite (DATABASE_URL)
# ✓ bcrypt пароль для админки (ADMIN_PASS_HASH)
# ✓ Sentry для мониторинга (SENTRY_DSN)
# ✓ Connection pooling настроен (DB_POOL_SIZE)
# ✓ Circuit Breaker включен (automatic)
# ✓ Task Manager для async tasks (automatic)
# ✓ Comprehensive test coverage (85%+)
# ✓ Сильный BOT_TOKEN от @BotFather
# ✓ .env не в Git (.gitignore проверен)
#
# Sentinel HA Benefits:
# • Automatic failover (< 5s downtime)
# • Circuit breaker pattern (prevent cascading failures)
# • Health monitoring and statistics
# • Multi-instance horizontal scaling
# • Zero data loss on master failure
