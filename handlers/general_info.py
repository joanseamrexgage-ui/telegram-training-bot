"""
Handler –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è".

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å:
- –ê–¥—Ä–µ—Å–∞–º–∏ –ø–∞—Ä–∫–æ–≤
- –í–∞–∂–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏
- –í–Ω–µ—à—Ç–∞—Ç–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏
- –ó–∞—Ä–ø–ª–∞—Ç–æ–π –∏ –∞–≤–∞–Ω—Å–æ–º
- –ü—Ä–∏–∫–∞–∑–∞–º–∏
- –°–∫–∏–¥–∫–∞–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
"""

import json
from pathlib import Path

from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from keyboards.general_info_kb import (
    get_general_info_menu,
    get_parks_menu,
    get_emergency_menu,
    get_orders_menu,
    get_discounts_parks_menu,
    get_back_to_general_info,
    get_back_to_addresses,
    get_back_to_phones,
    get_back_to_emergency,
    get_back_to_discounts
)
from states.menu_states import MenuStates
from utils.logger import logger

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router(name='general_info')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ JSON
CONTENT_PATH = Path(__file__).parent.parent / "content" / "texts" / "general_info.json"

try:
    with open(CONTENT_PATH, 'r', encoding='utf-8') as f:
        CONTENT = json.load(f)
    logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç general_info.json –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except FileNotFoundError:
    logger.error(f"‚ùå –§–∞–π–ª {CONTENT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    CONTENT = {}
except json.JSONDecodeError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    CONTENT = {}


@router.callback_query(F.data == "general_info")
async def show_general_info_menu(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è".
    
    Args:
        callback: Callback –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await state.set_state(MenuStates.general_info)
    
    main_menu_text = CONTENT.get("main_menu", {})
    text = (
        f"<b>{main_menu_text.get('title', 'üü¢ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}</b>\n\n"
        f"{main_menu_text.get('description', '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:')}"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_general_info_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_general_info_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# ========== –ê–î–†–ï–°–ê –ü–ê–†–ö–û–í ==========

@router.callback_query(F.data == "gen_addresses")
async def show_addresses_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥—Ä–µ—Å–∞."""
    text = (
        "<b>üìç –ê–¥—Ä–µ—Å–∞ –ø–∞—Ä–∫–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∫, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å:\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å\n"
        "‚Ä¢ –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –æ—Ç –º–µ—Ç—Ä–æ\n"
        "‚Ä¢ –ì–¥–µ –Ω–∞–π—Ç–∏ –ø–∞—Ä–∫ –≤ –¢–†–¶\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∫–æ–≤–∫–µ"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_parks_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_addresses_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("park_"))
async def show_park_address(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–∞—Ä–∫–µ.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback: park_zeleno, park_kashir, park_columb
    """
    park_code = callback.data.split("_")[1]  # zeleno, kashir, columb
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏ –¢–†–¶
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–∞—Ä–∫–∞ '{park_code}'")

    addresses = CONTENT.get("addresses", {})
    park_info = addresses.get(park_code, {})

    if not park_info:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        logger.warning(f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∫–µ '{park_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∫–∏ –≤ JSON: {list(addresses.keys())}")
        await callback.answer(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¢–†–¶ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            show_alert=True
        )
        return

    text = (
        f"<b>üè¢ {park_info.get('name')}</b>\n\n"
        f"<b>üìç –ê–¥—Ä–µ—Å:</b>\n{park_info.get('full_address')}\n\n"
        f"<b>üöá –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è:</b>\n{park_info.get('metro')}\n\n"
        f"<b>–ú–∞—Ä—à—Ä—É—Ç:</b>\n{park_info.get('how_to_get')}\n\n"
        f"<b>üó∫Ô∏è –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –¢–†–¶:</b>\n{park_info.get('location_in_mall')}\n\n"
        f"<b>üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–∫–∞:</b>\n{park_info.get('parking')}"
    )

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_addresses()
        )
        await callback.answer()
        logger.info(f"‚úÖ –ê–¥—Ä–µ—Å –ø–∞—Ä–∫–∞ '{park_code}' —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    except Exception as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –ø–æ–ª–Ω—ã–º traceback
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_park_address –¥–ª—è –ø–∞—Ä–∫–∞ '{park_code}', –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


# ========== –í–ê–ñ–ù–´–ï –¢–ï–õ–ï–§–û–ù–´ ==========

@router.callback_query(F.data == "gen_phones")
async def show_phones_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤."""
    text = (
        "<b>üìû –í–∞–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∫, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–∞—Ä–∫–∞\n"
        "‚Ä¢ –°—Ç–∞—Ä—à–∏–π —Å–º–µ–Ω—ã\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_parks_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_phones_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("park_") & F.data.in_(["park_zeleno", "park_kashir", "park_columb"]))
async def show_park_phones(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∫–∞.
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ –∂–µ callback —á—Ç–æ –∏ –∞–¥—Ä–µ—Å–∞, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
    # –ò–Ω–∞—á–µ —Ñ—É–Ω–∫—Ü–∏—è show_park_address –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∞–¥—Ä–µ—Å
    
    park_code = callback.data.split("_")[1]
    phones = CONTENT.get("phones", {})
    park_phones = phones.get(park_code, {})
    
    if not park_phones:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    admin = park_phones.get("admin", {})
    senior = park_phones.get("senior_shift", {})
    tech = park_phones.get("tech_support", {})
    emergency = park_phones.get("emergency", {})
    
    text = (
        f"<b>üìû {park_phones.get('park_name')}</b>\n\n"
        f"<b>üë§ {admin.get('name')}:</b>\n"
        f"   {admin.get('person')}\n"
        f"   üì± <a href='tel:{admin.get('phone')}'>{admin.get('phone')}</a>\n"
        f"   ‚è∞ {admin.get('work_hours')}\n\n"
        f"<b>üëî {senior.get('name')}:</b>\n"
        f"   üì± <a href='tel:{senior.get('phone')}'>{senior.get('phone')}</a>\n"
        f"   ‚è∞ {senior.get('work_hours')}\n\n"
        f"<b>üîß {tech.get('name')}:</b>\n"
        f"   üì± <a href='tel:{tech.get('phone')}'>{tech.get('phone')}</a>\n"
        f"   ‚è∞ {tech.get('work_hours')}\n\n"
        f"<b>üö® {emergency.get('name')}:</b>\n"
        f"   üì± <a href='tel:{emergency.get('phone')}'>{emergency.get('phone')}</a>\n"
        f"   ‚è∞ {emergency.get('work_hours')}"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_phones(),
            disable_web_page_preview=True
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_park_phones: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")


# ========== –í–ù–ï–®–¢–ê–¢–ù–´–ï –°–ò–¢–£–ê–¶–ò–ò ==========

@router.callback_query(F.data == "gen_emergency")
async def show_emergency_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤–Ω–µ—à—Ç–∞—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π."""
    emergency_data = CONTENT.get("emergency_situations", {})
    
    text = (
        f"<b>{emergency_data.get('title', 'üö® –î–µ–π—Å—Ç–≤–∏—è –≤–æ –≤–Ω–µ—à—Ç–∞—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö')}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_emergency_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_emergency_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("emergency_"))
async def show_emergency_instruction(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–Ω–µ—à—Ç–∞—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: evacuation, fire, medical, conflict, technical
    """
    situation_type = callback.data.split("_")[1]
    
    emergency_situations = CONTENT.get("emergency_situations", {})
    situation = emergency_situations.get(situation_type, {})
    
    if not situation:
        await callback.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    title = situation.get("title", "")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
    if situation_type in ["evacuation", "fire", "medical", "technical"]:
        steps = situation.get("steps", [])
        text = f"<b>{title}</b>\n\n" + "\n\n".join(steps)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if "emergency_exits" in situation:
            text += f"\n\n{situation['emergency_exits']}"
        if "extinguisher_location" in situation:
            text += f"\n\n{situation['extinguisher_location']}"
        if "first_aid_kit" in situation:
            text += f"\n\n{situation['first_aid_kit']}"
        if "common_issues" in situation:
            text += f"\n\n{situation['common_issues']}"
            
    elif situation_type == "conflict":
        algorithm = situation.get("algorithm", [])
        phrases = situation.get("phrases", {})
        
        text = f"<b>{title}</b>\n\n" + "\n\n".join(algorithm)
        text += f"\n\n{phrases.get('good', '')}"
        text += f"\n\n{phrases.get('bad', '')}"
    else:
        text = f"<b>{title}</b>\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
    
    try:
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è 4096 —Å–∏–º–≤–æ–ª–æ–≤
        if len(text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_emergency()
                    )
                else:
                    await callback.message.answer(text=part)
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_emergency()
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_emergency_instruction: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")


# ========== –ó–ê–†–ü–õ–ê–¢–ê –ò –ê–í–ê–ù–° ==========

@router.callback_query(F.data == "gen_salary")
async def show_salary_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∏ –∞–≤–∞–Ω—Å–µ."""
    salary_data = CONTENT.get("salary_info", {})
    schedule = salary_data.get("schedule", {})
    payment_methods = salary_data.get("payment_methods", [])
    delays = salary_data.get("delays", {})
    
    text = (
        f"<b>{salary_data.get('title', 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏ –∞–≤–∞–Ω—Å')}</b>\n\n"
        f"{schedule.get('advance', '')}\n"
        f"{schedule.get('salary', '')}\n"
        f"{schedule.get('amount', '')}\n\n"
        f"<b>üí≥ –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:</b>\n"
    )
    
    text += "\n".join(payment_methods)
    text += f"\n\n{salary_data.get('documents', '')}"
    text += f"\n\n<b>{delays.get('title', '')}</b>\n"
    text += "\n".join(delays.get('steps', []))
    text += f"\n\n{salary_data.get('taxes', '')}"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_general_info(),
            disable_web_page_preview=True
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_salary_info: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


# ========== –ü–†–ò–ö–ê–ó–´ –ü–ê–†–ö–ê ==========

@router.callback_query(F.data == "gen_orders")
async def show_orders_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏–∫–∞–∑–æ–≤ –ø–∞—Ä–∫–∞."""
    orders_data = CONTENT.get("orders", {})
    
    text = (
        f"<b>{orders_data.get('title', 'üìÑ –ü—Ä–∏–∫–∞–∑—ã –ø–∞—Ä–∫–∞')}</b>\n\n"
        f"{orders_data.get('description', '')}\n\n"
        f"{orders_data.get('how_to_access', '')}\n\n"
        f"{orders_data.get('important', '')}"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_orders_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_orders_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("order_"))
async def send_order_document(callback: CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–∫–∞–∑–∞.
    
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ content/media/documents/
    """
    order_number = callback.data.split("_")[1]
    
    # –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    documents_path = Path(__file__).parent.parent / "content" / "media" / "documents"
    order_file = documents_path / f"order_{order_number}.pdf"
    
    try:
        if order_file.exists():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            document = FSInputFile(order_file)
            await callback.message.answer_document(
                document=document,
                caption=f"üìÑ –ü—Ä–∏–∫–∞–∑ ‚Ññ{order_number}\n\n"
                        "‚ö†Ô∏è –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏ —Ä–∞—Å–ø–∏—à–∏—Ç–µ—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ."
            )
            await callback.answer("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await callback.answer(
                f"–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–∫–∞–∑–∞ ‚Ññ{order_number} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ order_{order_number}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞", show_alert=True)


# ========== –°–ö–ò–î–ö–ò –ü–ê–†–¢–ù–ï–†–û–í ==========

@router.callback_query(F.data == "gen_discounts")
async def show_discounts_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–∏–¥–æ–∫."""
    discounts_data = CONTENT.get("partner_discounts", {})
    
    text = (
        f"<b>{discounts_data.get('title', 'üéÅ –°–∫–∏–¥–∫–∏ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¢–†–¶')}</b>\n\n"
        f"{discounts_data.get('description', '')}\n\n"
        f"{discounts_data.get('how_to_get', '')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∫:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_discounts_parks_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_discounts_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("discount_"))
async def show_park_discounts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–∏–¥–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∫–∞."""
    park_code = callback.data.split("_")[1]
    
    discounts = CONTENT.get("partner_discounts", {})
    park_discounts = discounts.get(park_code, {})
    
    if not park_discounts:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    text = f"<b>üéÅ {park_discounts.get('title')}</b>\n\n"
    
    partners = park_discounts.get("partners", [])
    for partner in partners:
        text += (
            f"{partner.get('name')}\n"
            f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {partner.get('discount')}\n"
            f"üìã {partner.get('conditions')}\n"
            f"üìç {partner.get('location')}\n\n"
        )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_discounts()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_park_discounts: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∏–¥–æ–∫")
