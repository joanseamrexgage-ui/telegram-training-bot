"""
Handler –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –ø–∞—Ä–æ–ª—é
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –†–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import csv
import hashlib  # Deprecated: kept for backward compatibility
import json
import shutil
import tempfile
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict

# SEC-001 FIX: bcrypt for secure password hashing
import bcrypt

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from keyboards.admin_kb import (
    get_admin_main_menu,
    get_stats_menu,
    get_users_menu,
    get_user_actions,
    get_content_menu,
    get_broadcast_menu,
    get_broadcast_confirm,
    get_back_to_admin,
    get_cancel_button,
    get_pagination_keyboard
)
from states.admin_states import AdminStates
from database.crud import (
    get_all_users,
    get_user_by_telegram_id,
    block_user,
    unblock_user,
    get_user_activity,
    get_statistics,
    get_active_users_count,
    get_new_users_count,
    get_blocked_users,
    get_section_statistics,
    get_recent_activity,
    get_all_activity_for_export,
    get_date_statistics,
    get_users_for_export
)
# CRIT-005 FIX: Don't load config globally
from utils.logger import logger
from utils.timezone import get_msk_now, format_msk_datetime
# BLOCKER-002 FIX: Redis-backed password attempt tracking
from utils.auth_security import get_auth_security, MAX_ATTEMPTS, BLOCK_DURATION_MINUTES
# HIGH-003 FIX: Input sanitization and HTML escaping
from utils.sanitize import (
    sanitize_user_input,
    sanitize_username,
    sanitize_broadcast_message,
    sanitize_search_query,
    safe_user_name,
    safe_username
)
import os

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
router = Router(name='admin')

# SEC-001 FIX: bcrypt password hash from .env
# ‚ö†Ô∏è MIGRATION NOTE: Old SHA-256 hashes still supported for backward compatibility
# Generate new hash: python generate_admin_hash.py
# OLD SHA-256 default (admin123): "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9"
# NEW bcrypt default (admin123): "$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewY5ViT8QJy4E6M6"
DEFAULT_ADMIN_HASH = "$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewY5ViT8QJy4E6M6"  # bcrypt: admin123
ADMIN_PASS_HASH = os.getenv("ADMIN_PASS_HASH", DEFAULT_ADMIN_HASH)

# BLOCKER-002 FIX: Password attempts now tracked in Redis via utils.auth_security
# Removed in-memory password_attempts dict - now persists across bot restarts
# Maximum attempts and block duration configured in utils.auth_security:
# - MAX_ATTEMPTS = 3
# - BLOCK_DURATION_MINUTES = 5


def hash_password(password: str) -> str:
    """
    Deprecated: –•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é SHA-256

    SEC-001: Use bcrypt instead. This function kept for backward compatibility only.
    """
    return hashlib.sha256(password.encode()).hexdigest()


def check_password(input_password: str, correct_password_hash: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è

    SEC-001 FIX: Supports both bcrypt (new) and SHA-256 (legacy)

    Args:
        input_password: –ü–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        correct_password_hash: –•–µ—à –∏–∑ .env (bcrypt –∏–ª–∏ SHA-256)

    Returns:
        True if password matches, False otherwise
    """
    # SEC-001: Check if hash is bcrypt format
    if correct_password_hash.startswith("$2b$") or correct_password_hash.startswith("$2a$"):
        # New bcrypt verification (secure)
        try:
            return bcrypt.checkpw(
                input_password.encode('utf-8'),
                correct_password_hash.encode('utf-8')
            )
        except Exception as e:
            logger.error(f"bcrypt verification error: {e}")
            return False
    else:
        # Legacy SHA-256 verification (insecure, backward compatibility)
        logger.warning(
            "‚ö†Ô∏è SECURITY WARNING: Using legacy SHA-256 password hash! "
            "Please regenerate with bcrypt: python generate_admin_hash.py"
        )
        return hash_password(input_password) == correct_password_hash


# BLOCKER-002 FIX: Redis-backed password attempt tracking
# These functions now use utils.auth_security for persistent storage


async def is_user_blocked_from_attempts(user_id: int) -> tuple[bool, datetime | None]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.

    BLOCKER-002 FIX: Now uses Redis-backed storage (persists across restarts)

    Returns:
        Tuple of (is_blocked, blocked_until_datetime)
    """
    auth_security = get_auth_security()
    if not auth_security:
        logger.error("‚ùå AuthSecurity not initialized, blocking access as safety measure")
        return True, None

    is_blocked, blocked_until = await auth_security.is_user_blocked(user_id)
    return is_blocked, blocked_until


async def increment_password_attempts(user_id: int) -> tuple[int, datetime | None]:
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.

    BLOCKER-002 FIX: Now uses Redis-backed storage (persists across restarts)

    Returns:
        Tuple of (attempt_count, blocked_until_datetime)
    """
    auth_security = get_auth_security()
    if not auth_security:
        logger.error("‚ùå AuthSecurity not initialized, cannot track attempts")
        return 0, None

    attempts, blocked_until = await auth_security.increment_password_attempts(user_id)
    return attempts, blocked_until


async def reset_password_attempts(user_id: int):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    BLOCKER-002 FIX: Now uses Redis-backed storage (persists across restarts)
    """
    auth_security = get_auth_security()
    if not auth_security:
        logger.error("‚ùå AuthSecurity not initialized, cannot reset attempts")
        return

    await auth_security.reset_password_attempts(user_id)


# ========== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==========

@router.callback_query(F.data == "admin")
async def request_admin_password(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É."""
    user_id = callback.from_user.id

    # BLOCKER-002 FIX: Check Redis-backed block status
    is_blocked, blocked_until = await is_user_blocked_from_attempts(user_id)
    if is_blocked and blocked_until:
        minutes_left = int((blocked_until - datetime.utcnow()).total_seconds() / 60)

        await callback.answer(
            f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫!\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω—É—Ç.",
            show_alert=True
        )
        return

    await state.set_state(AdminStates.waiting_for_password)

    text = (
        "üîê <b>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–∫–∏\n"
        f"‚Ä¢ –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {BLOCK_DURATION_MINUTES} –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_cancel_button()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data == "cancel_admin_action")
async def cancel_admin_action(callback: CallbackQuery, state: FSMContext):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.

    –†–∞–Ω–µ–µ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ callback_data="admin_panel", —á—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –æ—à–∏–±–∫—É,
    —Ç.–∫. –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ return_to_admin_panel –ø—Ä–æ–≤–µ—Ä—è–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –æ—Ç–∫–∞–∑—ã–≤–∞–ª –≤ –¥–æ—Å—Ç—É–ø–µ.

    –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
    - –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª—é–±—ã–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ state.clear()
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    - –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã
    - –ù–µ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–æ–∫ –¥–∞–∂–µ –µ—Å–ª–∏ FSM —É–∂–µ —Å–±—Ä–æ—à–µ–Ω
    """
    try:
        user_id = callback.from_user.id
        current_state = await state.get_state()

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
        logger.info(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{callback.from_user.username}) "
            f"–æ—Ç–º–µ–Ω–∏–ª –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_state}"
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ)
        await state.clear()

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        from handlers.start import RETURN_TEXT
        from keyboards.inline import get_main_menu_keyboard

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            text=RETURN_TEXT,
            reply_markup=get_main_menu_keyboard()
        )

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("‚ùå –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–º–µ–Ω–µ–Ω")

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã")

    except Exception as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –ø–æ–ª–Ω—ã–º traceback
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}",
            exc_info=True
        )
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.answer("–í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=False)
        except Exception:
            pass


@router.message(StateFilter(AdminStates.waiting_for_password))
async def process_admin_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å."""
    user_id = message.from_user.id
    input_password = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except Exception:
        pass

    # BLOCKER-002 FIX: Check Redis-backed block status
    is_blocked, blocked_until = await is_user_blocked_from_attempts(user_id)
    if is_blocked and blocked_until:
        minutes_left = int((blocked_until - datetime.utcnow()).total_seconds() / 60)

        await message.answer(
            f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω—É—Ç."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è —Å —Ö–µ—à–µ–º –∏–∑ .env
    if check_password(input_password, ADMIN_PASS_HASH):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω try-except –±–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        # –†–∞–Ω–µ–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤ show_admin_panel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–ª –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        try:
            # BLOCKER-002 FIX: Reset attempts in Redis
            await reset_password_attempts(user_id)
            await state.set_state(AdminStates.authorized)

            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{message.from_user.username}) —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –∞–¥–º–∏–Ω–∫–µ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            await show_admin_panel(message, state)

            logger.info(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å traceback
            logger.error(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
                exc_info=True
            )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
            try:
                await message.answer(
                    "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
                    "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                    f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {type(e).__name__}"
                )
            except Exception:
                pass
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await state.clear()
    else:
        # BLOCKER-002 FIX: Increment attempts in Redis
        attempts, blocked_until = await increment_password_attempts(user_id)

        logger.warning(
            f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç {user_id} ({message.from_user.username}). "
            f"–ü–æ–ø—ã—Ç–∫–∞ {attempts}/{MAX_ATTEMPTS}"
        )

        if blocked_until:
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!</b>\n\n"
                f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {blocked_until.strftime('%H:%M')} "
                f"–∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫.\n\n"
                f"‚ö†Ô∏è –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥."
            )
            await state.clear()
        else:
            remaining = MAX_ATTEMPTS - attempts
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!</b>\n\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:"
            )


async def show_admin_panel(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
    –†–∞–Ω–µ–µ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    –ø—Ä–∏–≤–æ–¥–∏–ª–∞ –∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∏—Å–∫–ª—é—á–µ–Ω–∏—é –∏ —Å–æ–æ–±—â–µ–Ω–∏—é "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        logger.info(f"üîí –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        try:
            stats = await get_statistics()
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as stats_error:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}", exc_info=True)
            stats = {
                'total_users': 0,
                'active_today': 0,
                'new_this_week': 0
            }

        # HIGH-003 FIX: Sanitize admin name
        admin_name = safe_user_name(message.from_user)

        text = (
            "üîí <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_name}\n"
            # TIMEZONE: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            f"üïê –í—Ö–æ–¥: {get_msk_now().strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n\n"
            f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_this_week', 0)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await message.answer(
            text=text,
            reply_markup=get_admin_main_menu()
        )

        logger.info(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    except Exception as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ —Å traceback
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_admin_panel –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True
        )
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ process_admin_password
        raise


@router.callback_query(F.data == "admin_panel")
async def return_to_admin_panel(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #3: –†–∞—Å—à–∏—Ä–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    –†–∞–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–æ–π –∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–ª–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, broadcast_waiting_text, broadcast_confirm, broadcast_sending),
    —á—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –æ—à–∏–±–∫—É "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ" –∏–∑ —ç—Ç–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.

    –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "AdminStates:" - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç,
    —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.
    """
    current_state = await state.get_state()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–º –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    # –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if current_state and not current_state.startswith("AdminStates:"):
        logger.warning(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state}"
        )
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    logger.info(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏")

    await state.set_state(AdminStates.authorized)

    try:
        stats = await get_statistics()
    except Exception as stats_error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}", exc_info=True)
        stats = {'total_users': 0, 'active_today': 0, 'new_this_week': 0}
    
    text = (
        "üîí <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {callback.from_user.full_name}\n\n"
        f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_this_week', 0)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_admin_main_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫—É: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data == "return_to_admin")
async def return_to_admin_from_logs(callback: CallbackQuery, state: FSMContext):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ì–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ" –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –ª–æ–≥–æ–≤.

    –ü—Ä–æ–±–ª–µ–º–∞: –í —Ä–∞–∑–¥–µ–ª–µ "–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è callback_data="return_to_admin",
    –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ callback –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ –∫ –∑–∞–≤–∏—Å–∞–Ω–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

    –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π:
    - –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    - –î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å try-except
    """
    logger.info(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑ –ª–æ–≥–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏")

    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ authorized
        await state.set_state(AdminStates.authorized)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            stats = await get_statistics()
        except Exception as stats_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}", exc_info=True)
            stats = {'total_users': 0, 'active_today': 0, 'new_this_week': 0}

        text = (
            "üîí <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {callback.from_user.full_name}\n\n"
            f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_this_week', 0)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_admin_main_menu()
        )
        await callback.answer()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É –∏–∑ –ª–æ–≥–æ–≤: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é", show_alert=True)


@router.callback_query(F.data == "admin_logout")
async def admin_logout(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_id = callback.from_user.id
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω–∫–∏")

    await state.clear()

    text = (
        "üëã <b>–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>\n\n"
        "–í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å."
    )

    try:
        await callback.message.edit_text(text=text)
        await callback.answer("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
        await callback.answer("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")


# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========

@router.callback_query(F.data == "admin_stats")
async def show_stats_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    await state.set_state(AdminStates.stats_menu)
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data == "stats_general")
async def show_general_stats(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #2: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    –†–∞–Ω–µ–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ get_statistics() (–∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è get_db_session) –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–¥–∞–ª
    —Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞".
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            stats = await get_statistics()
            logger.info(f"‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as stats_error:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –∏ –ª–æ–≥–∏—Ä—É–µ–º
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}",
                exc_info=True
            )
            stats = {
                'total_users': 0,
                'active_today': 0,
                'active_week': 0,
                'new_this_week': 0,
                'blocked_users': 0,
                'total_actions': 0,
                'actions_today': 0,
                'avg_actions_per_day': 0.0
            }
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
            await callback.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∫–∞–∑–∞–Ω—ã –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.",
                show_alert=True
            )

        text = (
            "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_week', 0)}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_this_week', 0)}\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('blocked_users', 0)}\n\n"
            f"üì± <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_actions', 0)}\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('actions_today', 0)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–π/–¥–µ–Ω—å: {stats.get('avg_actions_per_day', 0):.1f}\n\n"
            # TIMEZONE: –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ú–°–ö
            f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b>\n"
            f"{get_msk_now().strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö)"
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()

    except Exception as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å traceback
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_general_stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}",
            exc_info=True
        )
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "stats_sections")
async def show_section_stats(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã).

    MVP FEATURE: –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å —Å "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" –Ω–∞ —Ä–∞–±–æ—á–∏–π.
    """
    # MVP: –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ
    SECTION_NAMES = {
        "general_info": "üìó –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "sales": "üíº –û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂",
        "sport": "‚öΩ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª",
        "admin": "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        "tests": "üìù –¢–µ—Å—Ç—ã",
        "main_menu": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        None: "–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∞"
    }

    try:
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤")

        try:
            # MVP: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            section_stats = await get_section_statistics(days=7)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(section_stats)} —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if section_stats:
                logger.debug(f"–¢–æ–ø-3 —Ä–∞–∑–¥–µ–ª–∞: {section_stats[:3]}")

        except Exception as stats_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: {stats_error}",
                exc_info=True
            )
            section_stats = []
            await callback.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤",
                show_alert=True
            )

        # MVP: –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        text = "üìä <b>–¢–æ–ø-5 —Ä–∞–∑–¥–µ–ª–æ–≤ –∑–∞ 7 –¥–Ω–µ–π</b>\n\n"

        if section_stats:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø-5, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            for i, (section, count) in enumerate(section_stats[:5], 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-3
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."

                # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
                section_name = SECTION_NAMES.get(section, f"‚ùì {section}")

                # MVP: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                text += f"{emoji} {section_name} ‚Äî {count} –ø–æ—Å–µ—â–µ–Ω–∏–π\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            total_views = sum(count for _, count in section_stats)
            text += f"\nüìà <b>–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {total_views}"
        else:
            # MVP: –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ "–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç"
            text += (
                "–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—á–∞—Ç.\n\n"
                "‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º.\n\n"
                "–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π —Ä–∞–∑–¥–µ–ª–æ–≤ –±–æ—Ç–∞."
            )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_section_stats: {e}",
            exc_info=True
        )
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "stats_users")
async def show_users_stats(callback: CallbackQuery):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π".

    –†–∞–Ω–µ–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ
    –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º—É "–¥—É–º–∞–Ω–∏—é" –±–æ—Ç–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.

    –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    try:
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await get_statistics()

            text = (
                "üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                f"üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total_users', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_week', 0)}\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_this_week', 0)}\n"
                f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('blocked_users', 0)}\n\n"
                f"üìà <b>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è: {(stats.get('active_today', 0) / max(stats.get('total_users', 1), 1) * 100):.1f}%\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é: {(stats.get('active_week', 0) / max(stats.get('total_users', 1), 1) * 100):.1f}%\n\n"
                f"üí° <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª \"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\" ‚Üí \"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\"\n\n"
                # TIMEZONE: –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ú–°–ö
                f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {get_msk_now().strftime('%H:%M:%S')} (–ú–°–ö)"
            )

            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as stats_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_error}", exc_info=True)
            text = (
                "üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_users_stats: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "stats_dates")
async def show_dates_stats(callback: CallbackQuery):
    """
    MVP FEATURE: –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å —Å "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" –Ω–∞ —Ä–∞–±–æ—á–∏–π.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–ü–Ω-–í—Å)
    - –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
    - –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã (—Ç–æ–ø-3)
    - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
    """
    try:
        logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞–º")

        # MVP: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        stats = await get_date_statistics(days=30)

        if not stats.get("has_data"):
            text = (
                "üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º</b>\n\n"
                "üìä –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å."
            )
            logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º")
        else:
            # MVP: –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
            # TIMEZONE: –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            text = f"üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['days_analyzed']} –¥–Ω–µ–π (–ú–°–ö)</b>\n\n"

            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            text += (
                f"üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}\n"
                f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–π/–¥–µ–Ω—å: {stats['total_actions'] // stats['days_analyzed']}\n\n"
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            text += "üìÜ <b>–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:</b>\n"
            weekday_stats = stats.get("weekday_stats", [])
            for day_stat in weekday_stats:
                if day_stat["actions"] > 0:
                    text += (
                        f"{day_stat['weekday']}: {day_stat['actions']} –¥–µ–π—Å—Ç–≤–∏–π "
                        f"({day_stat['unique_users']} –ø–æ–ª—å–∑.)\n"
                    )
            text += "\n"

            # –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
            top_days = stats.get("top_days", [])
            if top_days:
                text += "üèÜ <b>–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π:</b>\n"
                for i, day in enumerate(top_days, 1):
                    emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                    date_obj = datetime.strptime(day["date"], "%Y-%m-%d")
                    date_formatted = date_obj.strftime("%d.%m.%Y")
                    text += (
                        f"{emoji} {date_formatted}: {day['actions']} –¥–µ–π—Å—Ç–≤–∏–π "
                        f"({day['unique_users']} –ø–æ–ª—å–∑.)\n"
                    )
                text += "\n"

            # –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
            # TIMEZONE: –ß–∞—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            top_hours = stats.get("top_hours", [])
            if top_hours:
                text += "‚è∞ <b>–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã (–ú–°–ö):</b>\n"
                for i, hour_stat in enumerate(top_hours, 1):
                    hour = hour_stat["hour"]
                    text += (
                        f"{i}. {hour:02d}:00-{hour:02d}:59 ‚Äî "
                        f"{hour_stat['actions']} –¥–µ–π—Å—Ç–≤–∏–π\n"
                    )

            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_dates_stats: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "stats_export")
async def export_stats_to_excel(callback: CallbackQuery):
    """
    MVP FEATURE: –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV/Excel.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å —Å "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" –Ω–∞ —Ä–∞–±–æ—á–∏–π.

    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏:
    - Telegram ID, username, –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, —Ç–µ–ª–µ—Ñ–æ–Ω
    - –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    - –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    try:
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        await callback.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª...", show_alert=False)

        # MVP: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = await get_users_for_export()

        if not users_data:
            text = (
                "üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                "‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n\n"
                "–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
            )
            await callback.message.edit_text(
                text=text,
                reply_markup=get_stats_menu()
            )
            logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # MVP: –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
        # TIMEZONE: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        timestamp = get_msk_now().strftime("%Y%m%d_%H%M%S")
        filename = f"users_export_{timestamp}.csv"

        # –§–æ—Ä–º–∏—Ä—É–µ–º CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8-sig', suffix='.csv', delete=False, newline='') as f:
            # CSV writer —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Excel
            writer = csv.DictWriter(
                f,
                fieldnames=[
                    "ID", "Telegram ID", "Username", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω",
                    "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                ],
                delimiter=';'  # –î–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Excel
            )

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            writer.writeheader()

            # –î–∞–Ω–Ω—ã–µ
            for user in users_data:
                writer.writerow({
                    "ID": user["id"],
                    "Telegram ID": user["telegram_id"],
                    "Username": user["username"] if user["username"] else "-",
                    "–ò–º—è": user["first_name"] if user["first_name"] else "-",
                    "–§–∞–º–∏–ª–∏—è": user["last_name"] if user["last_name"] else "-",
                    "–¢–µ–ª–µ—Ñ–æ–Ω": user["phone"] if user["phone"] else "-",
                    "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": user["registration_date"] if user["registration_date"] else "-",
                    "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": user["last_activity"] if user["last_activity"] else "-",
                    "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω": user["is_blocked"],
                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": user["is_admin"]
                })

            temp_path = f.name

        logger.info(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_path}, –∑–∞–ø–∏—Å–µ–π: {len(users_data)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        document = FSInputFile(temp_path, filename=filename)

        # TIMEZONE: –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ú–°–ö
        caption = (
            f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            f"üìÅ –§–∞–π–ª: <code>{filename}</code>\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n"
            f"üìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {get_msk_now().strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö)\n\n"
            f"üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )

        await callback.message.answer_document(
            document=document,
            caption=caption
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Path(temp_path).unlink(missing_ok=True)
        logger.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω: {temp_path}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = (
            "‚úÖ <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            "–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.\n\n"
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ", show_alert=True)
        try:
            await callback.message.edit_text(
                text=(
                    "‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                ),
                reply_markup=get_stats_menu()
            )
        except:
            pass


# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ==========

@router.callback_query(F.data == "admin_users")
async def show_users_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    await state.set_state(AdminStates.users_menu)
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data == "users_list")
async def show_users_list(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #2: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            users = await get_all_users()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(users) if users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as users_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_error}",
                exc_info=True
            )
            await callback.answer(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                show_alert=True
            )
            return

        if not users:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = 1
        per_page = 10
        total_pages = (len(users) + per_page - 1) // per_page

        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_users = users[start_idx:end_idx]

        text = f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (—Å—Ç—Ä. {page}/{total_pages})\n\n"

        for user in page_users:
            status = "üö´" if user.get('is_blocked') else "‚úÖ"

            # HIGH-003 FIX: Sanitize user data before display
            first_name = sanitize_user_input(user.get('first_name') or '–ë–µ–∑ –∏–º–µ–Ω–∏', max_length=50)
            username_raw = user.get('username')
            if username_raw:
                username = f"@{sanitize_username(username_raw)}"
            else:
                username = "–Ω–µ—Ç username"

            text += (
                f"{status} <b>{first_name}</b> ({username})\n"
                f"   ID: <code>{user.get('telegram_id')}</code>\n"
                f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('registration_date_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_pagination_keyboard(page, total_pages, "users_list")
        )
        await callback.answer()

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_users_list: {e}",
            exc_info=True
        )
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("users_list_page_"))
async def handle_users_list_pagination(callback: CallbackQuery):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    –ü—Ä–æ–±–ª–µ–º–∞: –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä—ë–¥"/"–ù–∞–∑–∞–¥" –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç –∑–∞–≤–∏—Å–∞–ª,
    —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data "users_list_page_*" –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª.

    –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        page = int(callback.data.split("_")[-1])
        logger.info(f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            users = await get_all_users()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(users) if users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
        except Exception as users_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {users_error}",
                exc_info=True
            )
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                show_alert=True
            )
            return

        if not users:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        per_page = 10
        total_pages = (len(users) + per_page - 1) // per_page

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1 or page > total_pages:
            logger.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page} (–¥–æ—Å—Ç—É–ø–Ω–æ: 1-{total_pages})")
            await callback.answer(
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                show_alert=True
            )
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_users = users[start_idx:end_idx]

        logger.info(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {start_idx+1}-{min(end_idx, len(users))} –∏–∑ {len(users)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        text = f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (—Å—Ç—Ä. {page}/{total_pages})\n\n"

        for user in page_users:
            status = "üö´" if user.get('is_blocked') else "‚úÖ"

            # HIGH-003 FIX: Sanitize user data before display
            first_name = sanitize_user_input(user.get('first_name') or '–ë–µ–∑ –∏–º–µ–Ω–∏', max_length=50)
            username_raw = user.get('username')
            if username_raw:
                username = f"@{sanitize_username(username_raw)}"
            else:
                username = "–Ω–µ—Ç username"

            text += (
                f"{status} <b>{first_name}</b> ({username})\n"
                f"   ID: <code>{user.get('telegram_id')}</code>\n"
                f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('registration_date_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        await callback.message.edit_text(
            text=text,
            reply_markup=get_pagination_keyboard(page, total_pages, "users_list")
        )
        await callback.answer()
        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {callback.from_user.id}")

    except ValueError as ve:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ {callback.data}: {ve}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)
    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_users_list_pagination: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)


# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# –ü—Ä–æ–±–ª–µ–º–∞: –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è", "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
# –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ "–¥—É–º–∞–ª" - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏

@router.callback_query(F.data == "users_search")
async def handle_users_search(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è".

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    """
    try:
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        await state.set_state(AdminStates.waiting_user_search)

        text = (
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID, username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>123456789</code> (Telegram ID)\n"
            "‚Ä¢ <code>@username</code>\n"
            "‚Ä¢ <code>–ò–≤–∞–Ω</code> (–∏–º—è)"
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        )
        await callback.answer()
        logger.info(f"‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {callback.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_users_search: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞", show_alert=True)


@router.callback_query(F.data == "users_blocked")
async def handle_users_blocked(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏".

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö.
    """
    try:
        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
            blocked_users = await get_blocked_users()
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(blocked_users) if blocked_users else 0} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as db_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {db_error}",
                exc_info=True
            )
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã",
                show_alert=True
            )
            return

        if not blocked_users:
            logger.info("‚ÑπÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await callback.answer(
                "‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç",
                show_alert=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = f"üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> ({len(blocked_users)})\n\n"

        for user in blocked_users:
            username = f"@{user.get('username')}" if user.get('username') else "–Ω–µ—Ç username"
            reason = user.get('block_reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')

            text += (
                f"üö´ <b>{user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b> ({username})\n"
                f"   ID: <code>{user.get('telegram_id')}</code>\n"
                f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        )
        await callback.answer()
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {callback.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_users_blocked: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.callback_query(F.data == "users_active")
async def handle_users_active(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è".

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è.
    """
    try:
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = await get_all_users(limit=1000)
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(all_users) if all_users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v2: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
            # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å datetime –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é
            from datetime import datetime, timedelta
            today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)

            logger.info(f"üïê –ù–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è (UTC): {today_start}")

            active_today = []
            for user in all_users:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å last_activity - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                last_activity = user.get('last_activity')

                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(
                    f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id')}: "
                    f"last_activity={last_activity}, type={type(last_activity)}"
                )

                if last_activity and isinstance(last_activity, datetime):
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
                    if last_activity >= today_start:
                        active_today.append(user)
                        logger.info(
                            f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name')} "
                            f"(ID: {user.get('telegram_id')}), –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}"
                        )

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(active_today)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è")

        except Exception as db_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {db_error}",
                exc_info=True
            )
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã",
                show_alert=True
            )
            return

        if not active_today:
            logger.info("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await callback.answer(
                "‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω",
                show_alert=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è</b> ({len(active_today)})\n\n"

        for user in active_today[:50]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            username = f"@{user.get('username')}" if user.get('username') else "–Ω–µ—Ç username"
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ datetime –æ–±—ä–µ–∫—Ç–∞
            last_activity = user.get('last_activity_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            text += (
                f"‚úÖ <b>{user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b> ({username})\n"
                f"   ID: <code>{user.get('telegram_id')}</code>\n"
                f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
            )

        if len(active_today) > 50:
            text += f"\n... –∏ –µ—â—ë {len(active_today) - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        )
        await callback.answer()
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(active_today)}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {callback.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_users_active: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.callback_query(F.data == "users_new")
async def handle_users_new(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏".

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    """
    try:
        logger.info(f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = await get_all_users(limit=1000)
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(all_users) if all_users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v2: –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å datetime –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é
            from datetime import datetime, timedelta
            week_ago = datetime.utcnow() - timedelta(days=7)

            logger.info(f"üïê 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (UTC): {week_ago}")

            new_users = []
            for user in all_users:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å registration_date - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                registration_date = user.get('registration_date')

                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(
                    f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id')}: "
                    f"registration_date={registration_date}, type={type(registration_date)}"
                )

                if registration_date and isinstance(registration_date, datetime):
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
                    if registration_date >= week_ago:
                        new_users.append(user)
                        logger.info(
                            f"üÜï –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name')} "
                            f"(ID: {user.get('telegram_id')}), —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_date}"
                        )

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(new_users)} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")

        except Exception as db_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {db_error}",
                exc_info=True
            )
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã",
                show_alert=True
            )
            return

        if not new_users:
            logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await callback.answer(
                "‚ÑπÔ∏è –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç",
                show_alert=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = f"üÜï <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {len(new_users)})\n\n"

        for user in new_users[:50]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            username = f"@{user.get('username')}" if user.get('username') else "–Ω–µ—Ç username"
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ datetime –æ–±—ä–µ–∫—Ç–∞
            registration_date = user.get('registration_date_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            text += (
                f"üÜï <b>{user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b> ({username})\n"
                f"   ID: <code>{user.get('telegram_id')}</code>\n"
                f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_date}\n\n"
            )

        if len(new_users) > 50:
            text += f"\n... –∏ –µ—â—ë {len(new_users) - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        )
        await callback.answer()
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(new_users)}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {callback.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_users_new: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.message(StateFilter(AdminStates.waiting_user_search))
async def process_user_search(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID, username –∏–ª–∏ –∏–º–µ–Ω–∏.
    """
    try:
        # HIGH-003 FIX: Sanitize search query to prevent injection attacks
        search_query = sanitize_search_query(message.text.strip())
        logger.info(f"üîç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫: '{search_query}'")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await state.set_state(AdminStates.users_menu)

        user_found = None

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ Telegram ID (–µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ)
        if search_query.isdigit():
            try:
                telegram_id = int(search_query)
                user_found = await get_user_by_telegram_id(telegram_id)
                logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ Telegram ID {telegram_id}: {'–Ω–∞–π–¥–µ–Ω' if user_found else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            except Exception as search_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ ID: {search_error}")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID –∏–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ - –∏—â–µ–º –ø–æ username/–∏–º–µ–Ω–∏
        if not user_found:
            try:
                all_users = await get_all_users(limit=1000)

                # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –µ—Å—Ç—å
                search_clean = search_query.lstrip('@').lower()

                for user in all_users:
                    # –ü–æ–∏—Å–∫ –ø–æ username
                    if user.get('username') and user.get('username').lower() == search_clean:
                        user_found = user
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ username: @{user.get('username')}")
                        break

                    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                    if user.get('first_name') and search_query.lower() in user.get('first_name', '').lower():
                        user_found = user
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏: {user.get('first_name')}")
                        break

            except Exception as search_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {search_error}", exc_info=True)
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=get_users_menu()
                )
                return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        if not user_found:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '<code>{search_query}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                reply_markup=get_users_menu()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        status_emoji = "üö´" if user_found.get('is_blocked') else "‚úÖ"
        username = f"@{user_found.get('username')}" if user_found.get('username') else "–Ω–µ—Ç username"

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∞—Ç
        text = (
            f"üîç <b>–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n"
            f"{status_emoji} <b>{user_found.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} {user_found.get('last_name', '')}</b>\n"
            f"Username: {username}\n"
            f"Telegram ID: <code>{user_found.get('telegram_id')}</code>\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_found.get('registration_date_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_found.get('last_activity_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user_found.get('is_blocked') else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
        )

        if user_found.get('is_blocked') and user_found.get('block_reason'):
            text += f"–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {user_found.get('block_reason')}\n"

        await message.answer(
            text=text,
            reply_markup=get_users_menu()
        )
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {message.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_user_search: {e}",
            exc_info=True
        )
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞",
            reply_markup=get_users_menu()
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é
        await state.set_state(AdminStates.users_menu)


@router.callback_query(F.data.startswith("user_block_"))
async def block_user_action(callback: CallbackQuery):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(callback.data.replace("user_block_", ""))

    success = await block_user(user_id)

    if success:
        logger.info(f"üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("user_unblock_"))
async def unblock_user_action(callback: CallbackQuery):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(callback.data.replace("user_unblock_", ""))
    
    success = await unblock_user(user_id)
    
    if success:
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)


# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–û–ú ==========

@router.callback_query(F.data == "admin_content")
async def show_content_menu(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #4: –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    try:
        logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

        await state.set_state(AdminStates.content_management)

        text = (
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_content_menu()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("content_"))
async def handle_content_section(callback: CallbackQuery, state: FSMContext):
    """
    MVP FEATURE: –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å —Å "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" –Ω–∞ —Ä–∞–±–æ—á–∏–π.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
    - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON-—Ñ–∞–π–ª–æ–≤
    - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    - –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    """
    section = callback.data.replace("content_", "")

    logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ '{section}'")

    section_names = {
        "general": "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "sales": "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂",
        "sport": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª",
        "upload_video": "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ",
        "upload_doc": "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    }

    section_name = section_names.get(section, section)

    # MVP: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    if section in ["upload_video", "upload_doc"]:
        text = (
            f"‚úèÔ∏è <b>{section_name}</b>\n\n"
            "‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
            "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ –ø–∞–ø–∫—É content/media/"
        )
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_admin()
            )
            await callback.answer()
            logger.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è '{section}'")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
        return

    # MVP: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON-—Ñ–∞–π–ª–æ–≤
    file_mapping = {
        "general": "general_info.json",
        "sales": "sales.json",
        "sport": "sport.json"
    }

    if section not in file_mapping:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª", show_alert=True)
        return

    file_name = file_mapping[section]
    file_path = Path("content/texts") / file_name

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            content_data = json.load(f)

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {file_name}, –Ω–∞–π–¥–µ–Ω–æ {len(content_data)} —Ä–∞–∑–¥–µ–ª–æ–≤")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª—é—á–∞–º–∏
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard_buttons = []
        for key in content_data.keys():
            # –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞
            display_name = key.replace("_", " ").title()
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìù {display_name}",
                    callback_data=f"edit_{section}_{key}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–∞",
                callback_data="admin_content"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        text = (
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {section_name}</b>\n\n"
            f"üìÑ –§–∞–π–ª: <code>{file_name}</code>\n"
            f"üìä –†–∞–∑–¥–µ–ª–æ–≤: {len(content_data)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
        await state.update_data(
            current_section=section,
            current_file=file_name,
            content_data=content_data
        )
        await state.set_state(AdminStates.content_select_section)

        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        await callback.answer()
        logger.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–µ–π –¥–ª—è '{section}'")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ content_{section}: {e}", exc_info=True)
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞",
            show_alert=True
        )


@router.callback_query(F.data.startswith("edit_"))
async def handle_edit_key(callback: CallbackQuery, state: FSMContext):
    """
    MVP FEATURE: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –ø—Ä–æ—Å–∏—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –≤–∏–¥–∞: edit_{section}_{key}
    """
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: edit_general_main_menu
        parts = callback.data.split("_", 2)  # ["edit", "general", "main_menu"]
        if len(parts) < 3:
            await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", show_alert=True)
            return

        section = parts[1]
        key = parts[2]

        logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á '{key}' –≤ —Ä–∞–∑–¥–µ–ª–µ '{section}'")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        user_data = await state.get_data()
        content_data = user_data.get("content_data", {})

        if key not in content_data:
            await callback.answer(f"–ö–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        current_value = content_data[key]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if isinstance(current_value, dict):
            current_value_str = json.dumps(current_value, ensure_ascii=False, indent=2)
            value_type = "JSON –æ–±—ä–µ–∫—Ç"
        elif isinstance(current_value, list):
            current_value_str = json.dumps(current_value, ensure_ascii=False, indent=2)
            value_type = "JSON –º–∞—Å—Å–∏–≤"
        else:
            current_value_str = str(current_value)
            value_type = "–¢–µ–∫—Å—Ç"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if len(current_value_str) > 800:
            display_value = current_value_str[:800] + "\n...\n(–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 800 —Å–∏–º–≤–æ–ª–æ–≤)"
        else:
            display_value = current_value_str

        display_name = key.replace("_", " ").title()

        text = (
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞</b>\n\n"
            f"üìù –ö–ª—é—á: <code>{key}</code>\n"
            f"üìä –¢–∏–ø: {value_type}\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n"
            f"<pre>{display_value}</pre>\n\n"
            f"üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n"
            f"‚Ä¢ –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç\n"
            f"‚Ä¢ –î–ª—è JSON - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π JSON\n\n"
            f"‚ö†Ô∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã! –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ñ–∞–π–ª."
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                callback_data=f"content_{section}"
            )]
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º –∫–ª—é—á–µ
        await state.update_data(
            editing_key=key,
            editing_section=section
        )
        await state.set_state(AdminStates.content_editing)

        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        await callback.answer()
        logger.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ '{key}', –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–ª—é—á–∞: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.message(StateFilter(AdminStates.content_editing))
async def handle_new_content(message: Message, state: FSMContext):
    """
    MVP FEATURE: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON —Ñ–∞–π–ª.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è –∫–ª—é—á–∞.
    """
    try:
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        user_data = await state.get_data()
        key = user_data.get("editing_key")
        section = user_data.get("editing_section")
        file_name = user_data.get("current_file")
        content_data = user_data.get("content_data", {})

        if not all([key, section, file_name]):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        new_value_text = message.text.strip()

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        try:
            new_value = json.loads(new_value_text)
            logger.info(f"‚úÖ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∫–∞–∫ JSON")
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ JSON, –±–µ—Ä–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            new_value = new_value_text
            logger.info(f"‚ÑπÔ∏è –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
        old_value = content_data.get(key)
        content_data[key] = new_value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        file_path = Path("content/texts") / file_name

        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_path = Path("content/texts") / f"{file_name}.backup"
        if file_path.exists():
            shutil.copy2(file_path, backup_path)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(content_data, f, ensure_ascii=False, indent=2)

        logger.info(f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –ö–ª—é—á '{key}' –∏–∑–º–µ–Ω–µ–Ω")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if isinstance(new_value, (dict, list)):
            new_value_preview = json.dumps(new_value, ensure_ascii=False, indent=2)[:200]
        else:
            new_value_preview = str(new_value)[:200]

        text = (
            f"‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
            f"üìÑ –§–∞–π–ª: <code>{file_name}</code>\n"
            f"üìù –ö–ª—é—á: <code>{key}</code>\n\n"
            f"<b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n"
            f"<pre>{new_value_preview}</pre>\n\n"
            f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: <code>{backup_path.name}</code>\n\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–ª—é—á",
                callback_data=f"content_{section}"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–∞",
                callback_data="admin_content"
            )],
            [InlineKeyboardButton(
                text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏",
                callback_data="admin_panel"
            )]
        ])

        await message.answer(
            text=text,
            reply_markup=keyboard
        )

        # –û—á–∏—â–∞–µ–º state —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(AdminStates.authorized)
        logger.info(f"‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}", exc_info=True)
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:</b>\n\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


# ========== –†–ê–°–°–´–õ–ö–ê ==========

@router.callback_query(F.data == "admin_broadcast")
async def show_broadcast_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.set_state(AdminStates.broadcast_menu)
    
    text = (
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_broadcast_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("broadcast_send_"))
async def send_broadcast(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –í–´–®–ï process_broadcast_target.
    –†–∞–Ω–µ–µ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback "broadcast_send_all"
    —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –≤ process_broadcast_target, –≥–¥–µ target = "send_all"
    –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–¥–∞–≤–∞–ª –æ—à–∏–±–∫—É "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è".
    """
    try:
        logger.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏")

        data = await state.get_data()
        broadcast_text = data.get("broadcast_text")
        target = data.get("broadcast_target")

        logger.info(f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {target}, —Ç–µ–∫—Å—Ç: {broadcast_text[:50] if broadcast_text else 'None'}...")

        await state.set_state(AdminStates.broadcast_sending)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if target == "all":
            users = await get_all_users()
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(users) if users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ '–≤—Å–µ–º'")
        elif target == "active":
            users = await get_all_users()  # TODO: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(users) if users else 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            users = []
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {target}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        success_count = 0
        fail_count = 0

        await callback.message.edit_text("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")

        for user in users:
            if user.get('is_blocked'):
                continue

            try:
                await callback.bot.send_message(
                    chat_id=user.get('telegram_id'),
                    text=f"üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n{broadcast_text}"
                )
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get('telegram_id')}: {e}")
                fail_count += 1

        logger.info(
            f"üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É. "
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {fail_count}"
        )

        result_text = (
            "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫: {fail_count}"
        )

        await callback.message.edit_text(
            text=result_text,
            reply_markup=get_back_to_admin()
        )
        await state.set_state(AdminStates.authorized)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("broadcast_"))
async def process_broadcast_target(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "send_" –≤ –Ω–∞—á–∞–ª–µ target.
    –†–∞–Ω–µ–µ callback_data "broadcast_send_all" —Ç–∞–∫–∂–µ –ø–æ–ø–∞–¥–∞–ª –≤ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫,
    –Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è "broadcast_" –ø–æ–ª—É—á–∞–ª–æ—Å—å target="send_all", –∫–æ—Ç–æ—Ä–æ–µ
    –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–æ –Ω–∏ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–¥–∞–≤–∞–ª–æ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è".

    –¢–µ–ø–µ—Ä—å —Ç–∞–∫–∏–µ callback –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è, —Ç.–∫. –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ send_broadcast –≤—ã—à–µ.
    """
    target = callback.data.replace("broadcast_", "")

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback'–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ)
    if target.startswith("send_"):
        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º broadcast_send_ callback –≤ process_broadcast_target")
        return

    logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏: {target}")

    if target == "history":
        await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    try:
        if target == "all":
            count = await get_active_users_count()
            target_text = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è '–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': {count} —á–µ–ª.")
        elif target == "sales":
            count = 0  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º
            target_text = "–æ—Ç–¥–µ–ª—É –ø—Ä–æ–¥–∞–∂"
            logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏—Ç–æ—Ä–∏—è '–æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        elif target == "sport":
            count = 0
            target_text = "—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º—É –æ—Ç–¥–µ–ª—É"
            logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏—Ç–æ—Ä–∏—è '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        elif target == "active":
            count = await get_active_users_count()
            target_text = "–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è '–∞–∫—Ç–∏–≤–Ω—ã–µ': {count} —á–µ–ª.")
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {target}")
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", show_alert=True)
            return

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ '{target}': {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏", show_alert=True)
        return
    
    await state.update_data(broadcast_target=target, broadcast_count=count)
    await state.set_state(AdminStates.broadcast_waiting_text)
    
    text = (
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞: {target_text}</b>\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {count} —á–µ–ª.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;</code>\n"
        "‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
        "‚Ä¢ <code>&lt;code&gt;–∫–æ–¥&lt;/code&gt;</code>"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_cancel_button()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.message(StateFilter(AdminStates.broadcast_waiting_text))
async def confirm_broadcast(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    # HIGH-003 FIX: Sanitize broadcast message to prevent HTML injection
    broadcast_text = sanitize_broadcast_message(message.text, max_length=4096)
    data = await state.get_data()

    target = data.get("broadcast_target")
    count = data.get("broadcast_count", 0)

    await state.update_data(broadcast_text=broadcast_text)
    await state.set_state(AdminStates.broadcast_confirm)
    
    text = (
        "üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É</b>\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {count} —á–µ–ª.\n\n"
        "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{broadcast_text}\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å?"
    )
    
    await message.answer(
        text=text,
        reply_markup=get_broadcast_confirm(target, count)
    )


# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ send_broadcast —É–¥–∞–ª–µ–Ω, —Ç.–∫. –Ω–æ–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã—à–µ (—Å—Ç—Ä–æ–∫–∞ 784)
# —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫


# ========== –õ–û–ì–ò ==========

@router.callback_query(F.data == "admin_logs")
async def show_logs(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    MVP FEATURE: –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å —Å "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" –Ω–∞ —Ä–∞–±–æ—á–∏–π.
    """
    try:
        logger.info(f"üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

        # MVP: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –¥–µ–π—Å—Ç–≤–∏–π
        try:
            recent_logs = await get_recent_activity(limit=50)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(recent_logs)} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤")
        except Exception as logs_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {logs_error}",
                exc_info=True
            )
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                show_alert=True
            )
            return

        # MVP: –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        if recent_logs:
            text = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_logs)} –¥–µ–π—Å—Ç–≤–∏–π</b>\n\n"

            for log in recent_logs[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥: –∫—Ç–æ, —á—Ç–æ, –∫–æ–≥–¥–∞
                username_display = f"@{log['username']}" if log['username'] != "–±–µ–∑ username" else log['first_name']
                action_text = log['action'].replace("_", " ").title()

                text += (
                    f"üë§ {username_display} (ID: {log['telegram_id']})\n"
                    f"   üìå {action_text}"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –µ—Å–ª–∏ –µ—Å—Ç—å
                if log['section'] != "-":
                    text += f" ‚Üí {log['section']}"

                text += f"\n   üïê {log['timestamp_str']}\n\n"

            # –ï—Å–ª–∏ –ª–æ–≥–æ–≤ –±–æ–ª—å—à–µ 20, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if len(recent_logs) > 20:
                text += f"... –∏ –µ—â—ë {len(recent_logs) - 20} –∑–∞–ø–∏—Å–µ–π\n\n"

            text += (
                "‚ÑπÔ∏è –î–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∞ –∑–∞ 30 –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤</b>.\n\n"
                "üìä –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: 20 –∏–∑ 50"
            )
        else:
            # MVP: –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (
                "üìã <b>–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
                "–í –∂—É—Ä–Ω–∞–ª–µ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è.\n\n"
                "‚ÑπÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        from keyboards.admin_kb import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üì• –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª",
                callback_data="export_logs"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ",
                callback_data="return_to_admin"
            )]
        ])

        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        await callback.answer()

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_logs: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤", show_alert=True)


@router.callback_query(F.data == "export_logs")
async def export_logs_to_file(callback: CallbackQuery):
    """
    –í—ã–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.

    MVP FEATURE: –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –≤ .txt —Ñ–∞–π–ª.
    """
    try:
        logger.info(f"üì• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤")

        await callback.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞...", show_alert=False)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        try:
            all_logs = await get_all_activity_for_export(days=30)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_logs)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        except Exception as export_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_error}",
                exc_info=True
            )
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
                show_alert=True
            )
            return

        if not all_logs:
            await callback.answer(
                "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
                show_alert=True
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        # TIMEZONE: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        timestamp = get_msk_now().strftime("%Y%m%d_%H%M%S")
        filename = f"activity_logs_{timestamp}.txt"

        # MVP: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content_lines = [
            "=" * 80,
            f"–õ–û–ì–ò –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô",
            f"–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
            # TIMEZONE: –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ –ú–°–ö
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {get_msk_now().strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö)",
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_logs)}",
            "=" * 80,
            ""
        ]

        for i, log in enumerate(all_logs, 1):
            username = f"@{log['username']}" if log['username'] else log['first_name']
            full_name = f"{log['first_name']} {log['last_name']}".strip()

            content_lines.extend([
                f"[{i}] {log['timestamp']}",
                f"    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} ({username})",
                f"    Telegram ID: {log['telegram_id']}",
                f"    –î–µ–π—Å—Ç–≤–∏–µ: {log['action']}",
                f"    –†–∞–∑–¥–µ–ª: {log['section'] or '-'}",
                f"    –ü–æ–¥—Ä–∞–∑–¥–µ–ª: {log['subsection'] or '-'}",
                f"    Callback: {log['callback_data'] or '-'}",
                "-" * 80,
                ""
            ])

        content = "\n".join(content_lines)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', suffix='.txt', delete=False) as f:
            f.write(content)
            temp_path = f.name

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        document = FSInputFile(temp_path, filename=filename)

        # TIMEZONE: –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ caption –≤ –ú–°–ö
        await callback.message.answer_document(
            document=document,
            caption=(
                f"üì• <b>–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
                f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_logs)}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: 30 –¥–Ω–µ–π\n"
                f"üïê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {get_msk_now().strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö)"
            )
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Path(temp_path).unlink(missing_ok=True)

        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        logger.info(f"‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {callback.from_user.id}: {len(all_logs)} –∑–∞–ø–∏—Å–µ–π")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ export_logs_to_file: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤", show_alert=True)
