"""
Handler –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –ø–∞—Ä–æ–ª—é
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –†–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import hashlib
from datetime import datetime, timedelta
from typing import Dict

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from keyboards.admin_kb import (
    get_admin_main_menu,
    get_stats_menu,
    get_users_menu,
    get_user_actions,
    get_content_menu,
    get_broadcast_menu,
    get_broadcast_confirm,
    get_back_to_admin,
    get_cancel_button,
    get_pagination_keyboard
)
from states.admin_states import AdminStates
from database.crud import (
    get_all_users,
    get_user_by_telegram_id,
    block_user,
    unblock_user,
    get_user_activity,
    get_statistics,
    get_active_users_count,
    get_new_users_count,
    get_blocked_users,
    get_section_statistics
)
# CRIT-005 FIX: Don't load config globally
from utils.logger import logger
import os

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
router = Router(name='admin')

# –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ .env
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö–µ—à –æ—Ç "admin123"
# –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞: import hashlib; print(hashlib.sha256("your_password".encode()).hexdigest())
DEFAULT_ADMIN_HASH = "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9"  # admin123
ADMIN_PASS_HASH = os.getenv("ADMIN_PASS_HASH", DEFAULT_ADMIN_HASH)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è {user_id: {"attempts": int, "blocked_until": datetime}}
password_attempts: Dict[int, dict] = {}

# –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
MAX_ATTEMPTS = 3
BLOCK_DURATION = timedelta(minutes=5)


def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é SHA-256."""
    return hashlib.sha256(password.encode()).hexdigest()


def check_password(input_password: str, correct_password_hash: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è."""
    return hash_password(input_password) == correct_password_hash


def is_user_blocked_from_attempts(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
    if user_id not in password_attempts:
        return False
    
    blocked_until = password_attempts[user_id].get("blocked_until")
    if blocked_until and datetime.now() < blocked_until:
        return True
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—à–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    if blocked_until and datetime.now() >= blocked_until:
        password_attempts[user_id] = {"attempts": 0, "blocked_until": None}
    
    return False


def increment_password_attempts(user_id: int) -> tuple[int, datetime | None]:
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–ø—ã—Ç–æ–∫, –≤—Ä–µ–º—è_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏).
    """
    if user_id not in password_attempts:
        password_attempts[user_id] = {"attempts": 0, "blocked_until": None}
    
    password_attempts[user_id]["attempts"] += 1
    attempts = password_attempts[user_id]["attempts"]
    
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if attempts >= MAX_ATTEMPTS:
        blocked_until = datetime.now() + BLOCK_DURATION
        password_attempts[user_id]["blocked_until"] = blocked_until
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {blocked_until} –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
        return attempts, blocked_until
    
    return attempts, None


def reset_password_attempts(user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    if user_id in password_attempts:
        password_attempts[user_id] = {"attempts": 0, "blocked_until": None}


# ========== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==========

@router.callback_query(F.data == "admin")
async def request_admin_password(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É."""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_user_blocked_from_attempts(user_id):
        blocked_until = password_attempts[user_id]["blocked_until"]
        minutes_left = int((blocked_until - datetime.now()).total_seconds() / 60)
        
        await callback.answer(
            f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫!\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω—É—Ç.",
            show_alert=True
        )
        return
    
    await state.set_state(AdminStates.waiting_for_password)
    
    text = (
        "üîê <b>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–∫–∏\n"
        f"‚Ä¢ –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {BLOCK_DURATION.seconds // 60} –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_cancel_button()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data == "cancel_admin_action")
async def cancel_admin_action(callback: CallbackQuery, state: FSMContext):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.

    –†–∞–Ω–µ–µ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ callback_data="admin_panel", —á—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –æ—à–∏–±–∫—É,
    —Ç.–∫. –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ return_to_admin_panel –ø—Ä–æ–≤–µ—Ä—è–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –æ—Ç–∫–∞–∑—ã–≤–∞–ª –≤ –¥–æ—Å—Ç—É–ø–µ.

    –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
    - –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª—é–±—ã–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ state.clear()
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    - –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã
    - –ù–µ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–æ–∫ –¥–∞–∂–µ –µ—Å–ª–∏ FSM —É–∂–µ —Å–±—Ä–æ—à–µ–Ω
    """
    try:
        user_id = callback.from_user.id
        current_state = await state.get_state()

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
        logger.info(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{callback.from_user.username}) "
            f"–æ—Ç–º–µ–Ω–∏–ª –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_state}"
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ)
        await state.clear()

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        from handlers.start import RETURN_TEXT
        from keyboards.inline import get_main_menu_keyboard

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            text=RETURN_TEXT,
            reply_markup=get_main_menu_keyboard()
        )

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("‚ùå –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–º–µ–Ω–µ–Ω")

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã")

    except Exception as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –ø–æ–ª–Ω—ã–º traceback
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}",
            exc_info=True
        )
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.answer("–í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=False)
        except Exception:
            pass


@router.message(StateFilter(AdminStates.waiting_for_password))
async def process_admin_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å."""
    user_id = message.from_user.id
    input_password = message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except Exception:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_user_blocked_from_attempts(user_id):
        blocked_until = password_attempts[user_id]["blocked_until"]
        minutes_left = int((blocked_until - datetime.now()).total_seconds() / 60)
        
        await message.answer(
            f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω—É—Ç."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è —Å —Ö–µ—à–µ–º –∏–∑ .env
    if check_password(input_password, ADMIN_PASS_HASH):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω try-except –±–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        # –†–∞–Ω–µ–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤ show_admin_panel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–ª –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        try:
            # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
            reset_password_attempts(user_id)
            await state.set_state(AdminStates.authorized)

            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{message.from_user.username}) —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –∞–¥–º–∏–Ω–∫–µ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            await show_admin_panel(message, state)

            logger.info(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å traceback
            logger.error(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
                exc_info=True
            )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
            try:
                await message.answer(
                    "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
                    "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                    f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {type(e).__name__}"
                )
            except Exception:
                pass
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await state.clear()
    else:
        # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
        attempts, blocked_until = increment_password_attempts(user_id)
        
        logger.warning(
            f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç {user_id} ({message.from_user.username}). "
            f"–ü–æ–ø—ã—Ç–∫–∞ {attempts}/{MAX_ATTEMPTS}"
        )
        
        if blocked_until:
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!</b>\n\n"
                f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {blocked_until.strftime('%H:%M')} "
                f"–∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫.\n\n"
                f"‚ö†Ô∏è –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥."
            )
            await state.clear()
        else:
            remaining = MAX_ATTEMPTS - attempts
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!</b>\n\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:"
            )


async def show_admin_panel(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
    –†–∞–Ω–µ–µ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    –ø—Ä–∏–≤–æ–¥–∏–ª–∞ –∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∏—Å–∫–ª—é—á–µ–Ω–∏—é –∏ —Å–æ–æ–±—â–µ–Ω–∏—é "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        logger.info(f"üîí –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        try:
            stats = await get_statistics()
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as stats_error:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}", exc_info=True)
            stats = {
                'total_users': 0,
                'active_today': 0,
                'new_this_week': 0
            }

        text = (
            "üîí <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.full_name}\n"
            f"üïê –í—Ö–æ–¥: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_this_week', 0)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await message.answer(
            text=text,
            reply_markup=get_admin_main_menu()
        )

        logger.info(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    except Exception as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ —Å traceback
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_admin_panel –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True
        )
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ process_admin_password
        raise


@router.callback_query(F.data == "admin_panel")
async def return_to_admin_panel(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #3: –†–∞—Å—à–∏—Ä–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    –†–∞–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–æ–π –∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–ª–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, broadcast_waiting_text, broadcast_confirm, broadcast_sending),
    —á—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –æ—à–∏–±–∫—É "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ" –∏–∑ —ç—Ç–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.

    –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "AdminStates:" - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç,
    —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.
    """
    current_state = await state.get_state()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–º –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    # –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if current_state and not current_state.startswith("AdminStates:"):
        logger.warning(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state}"
        )
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    logger.info(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏")

    await state.set_state(AdminStates.authorized)

    try:
        stats = await get_statistics()
    except Exception as stats_error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}", exc_info=True)
        stats = {'total_users': 0, 'active_today': 0, 'new_this_week': 0}
    
    text = (
        "üîí <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {callback.from_user.full_name}\n\n"
        f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_this_week', 0)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_admin_main_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫—É: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data == "admin_logout")
async def admin_logout(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_id = callback.from_user.id
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
    
    await state.clear()
    
    text = (
        "üëã <b>–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>\n\n"
        "–í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å."
    )
    
    try:
        await callback.message.edit_text(text=text)
        await callback.answer("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
        await callback.answer("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")


# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========

@router.callback_query(F.data == "admin_stats")
async def show_stats_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    await state.set_state(AdminStates.stats_menu)
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data == "stats_general")
async def show_general_stats(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #2: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    –†–∞–Ω–µ–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ get_statistics() (–∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è get_db_session) –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–¥–∞–ª
    —Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞".
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            stats = await get_statistics()
            logger.info(f"‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as stats_error:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –∏ –ª–æ–≥–∏—Ä—É–µ–º
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}",
                exc_info=True
            )
            stats = {
                'total_users': 0,
                'active_today': 0,
                'active_week': 0,
                'new_this_week': 0,
                'blocked_users': 0,
                'total_actions': 0,
                'actions_today': 0,
                'avg_actions_per_day': 0.0
            }
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
            await callback.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∫–∞–∑–∞–Ω—ã –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.",
                show_alert=True
            )

        text = (
            "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_week', 0)}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_this_week', 0)}\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('blocked_users', 0)}\n\n"
            f"üì± <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_actions', 0)}\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('actions_today', 0)}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–π/–¥–µ–Ω—å: {stats.get('avg_actions_per_day', 0):.1f}\n\n"
            f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b>\n"
            f"{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()

    except Exception as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å traceback
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_general_stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}",
            exc_info=True
        )
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "stats_sections")
async def show_section_stats(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #2: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
    """
    try:
        logger.info(f"üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º")

        try:
            section_stats = await get_section_statistics()
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –ø–æ–ª—É—á–µ–Ω–∞")
        except Exception as stats_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: {stats_error}",
                exc_info=True
            )
            section_stats = []
            await callback.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤",
                show_alert=True
            )

        text = "üì± <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã</b>\n\n"

        if section_stats:
            for i, (section, count) in enumerate(section_stats[:10], 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                text += f"{emoji} {section}: {count} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
        else:
            text += "–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç"

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_section_stats: {e}",
            exc_info=True
        )
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "stats_users")
async def show_users_stats(callback: CallbackQuery):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π".

    –†–∞–Ω–µ–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ
    –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º—É "–¥—É–º–∞–Ω–∏—é" –±–æ—Ç–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.

    –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    try:
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await get_statistics()

            text = (
                "üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                f"üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total_users', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_week', 0)}\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_this_week', 0)}\n"
                f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('blocked_users', 0)}\n\n"
                f"üìà <b>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è: {(stats.get('active_today', 0) / max(stats.get('total_users', 1), 1) * 100):.1f}%\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é: {(stats.get('active_week', 0) / max(stats.get('total_users', 1), 1) * 100):.1f}%\n\n"
                f"üí° <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª \"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\" ‚Üí \"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\"\n\n"
                f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )

            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as stats_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_error}", exc_info=True)
            text = (
                "üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_users_stats: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "stats_dates")
async def show_dates_stats(callback: CallbackQuery):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º".

    –†–∞–Ω–µ–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ
    –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º—É "–¥—É–º–∞–Ω–∏—é" –±–æ—Ç–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.
    """
    try:
        logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞–º")

        text = (
            "üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º</b>\n\n"
            "‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
            "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
            "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏\n"
            "‚Ä¢ –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n"
            "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤\n\n"
            "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()
        logger.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_dates_stats: {e}", exc_info=True)
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data == "stats_export")
async def export_stats_to_excel(callback: CallbackQuery):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel".

    –†–∞–Ω–µ–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ
    –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º—É "–¥—É–º–∞–Ω–∏—é" –±–æ—Ç–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.
    """
    try:
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel")

        text = (
            "üìä <b>–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel</b>\n\n"
            "‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
            "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
            "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –æ—Ç—á–µ—Ç—ã:\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–∞–º\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
            "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π\n"
            "‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º\n\n"
            "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É "
            "—Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_stats_menu()
        )
        await callback.answer()
        logger.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ export_stats_to_excel: {e}", exc_info=True)
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ==========

@router.callback_query(F.data == "admin_users")
async def show_users_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    await state.set_state(AdminStates.users_menu)
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data == "users_list")
async def show_users_list(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #2: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            users = await get_all_users()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(users) if users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as users_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_error}",
                exc_info=True
            )
            await callback.answer(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                show_alert=True
            )
            return

        if not users:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = 1
        per_page = 10
        total_pages = (len(users) + per_page - 1) // per_page

        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_users = users[start_idx:end_idx]

        text = f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (—Å—Ç—Ä. {page}/{total_pages})\n\n"

        for user in page_users:
            status = "üö´" if user.get('is_blocked') else "‚úÖ"
            username = f"@{user.get('username')}" if user.get('username') else "–Ω–µ—Ç username"

            text += (
                f"{status} <b>{user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b> ({username})\n"
                f"   ID: <code>{user.get('telegram_id')}</code>\n"
                f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_pagination_keyboard(page, total_pages, "users_list")
        )
        await callback.answer()

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_users_list: {e}",
            exc_info=True
        )
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞", show_alert=True)


# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# –ü—Ä–æ–±–ª–µ–º–∞: –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è", "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
# –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ "–¥—É–º–∞–ª" - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏

@router.callback_query(F.data == "users_search")
async def handle_users_search(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è".

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    """
    try:
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        await state.set_state(AdminStates.waiting_user_search)

        text = (
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID, username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>123456789</code> (Telegram ID)\n"
            "‚Ä¢ <code>@username</code>\n"
            "‚Ä¢ <code>–ò–≤–∞–Ω</code> (–∏–º—è)"
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        )
        await callback.answer()
        logger.info(f"‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {callback.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_users_search: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞", show_alert=True)


@router.callback_query(F.data == "users_blocked")
async def handle_users_blocked(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏".

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö.
    """
    try:
        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
            blocked_users = await get_blocked_users()
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(blocked_users) if blocked_users else 0} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as db_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {db_error}",
                exc_info=True
            )
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã",
                show_alert=True
            )
            return

        if not blocked_users:
            logger.info("‚ÑπÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await callback.answer(
                "‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç",
                show_alert=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = f"üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> ({len(blocked_users)})\n\n"

        for user in blocked_users:
            username = f"@{user.get('username')}" if user.get('username') else "–Ω–µ—Ç username"
            reason = user.get('block_reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')

            text += (
                f"üö´ <b>{user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b> ({username})\n"
                f"   ID: <code>{user.get('telegram_id')}</code>\n"
                f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        )
        await callback.answer()
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {callback.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_users_blocked: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.callback_query(F.data == "users_active")
async def handle_users_active(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è".

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è.
    """
    try:
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = await get_all_users(limit=1000)
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(all_users) if all_users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v2: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
            # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å datetime –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é
            from datetime import datetime, timedelta
            today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)

            logger.info(f"üïê –ù–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è (UTC): {today_start}")

            active_today = []
            for user in all_users:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å last_activity - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                last_activity = user.get('last_activity')

                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(
                    f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id')}: "
                    f"last_activity={last_activity}, type={type(last_activity)}"
                )

                if last_activity and isinstance(last_activity, datetime):
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
                    if last_activity >= today_start:
                        active_today.append(user)
                        logger.info(
                            f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name')} "
                            f"(ID: {user.get('telegram_id')}), –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}"
                        )

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(active_today)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è")

        except Exception as db_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {db_error}",
                exc_info=True
            )
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã",
                show_alert=True
            )
            return

        if not active_today:
            logger.info("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await callback.answer(
                "‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω",
                show_alert=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è</b> ({len(active_today)})\n\n"

        for user in active_today[:50]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            username = f"@{user.get('username')}" if user.get('username') else "–Ω–µ—Ç username"
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ datetime –æ–±—ä–µ–∫—Ç–∞
            last_activity = user.get('last_activity_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            text += (
                f"‚úÖ <b>{user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b> ({username})\n"
                f"   ID: <code>{user.get('telegram_id')}</code>\n"
                f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
            )

        if len(active_today) > 50:
            text += f"\n... –∏ –µ—â—ë {len(active_today) - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        )
        await callback.answer()
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(active_today)}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {callback.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_users_active: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.callback_query(F.data == "users_new")
async def handle_users_new(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏".

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    """
    try:
        logger.info(f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = await get_all_users(limit=1000)
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(all_users) if all_users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v2: –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å datetime –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é
            from datetime import datetime, timedelta
            week_ago = datetime.utcnow() - timedelta(days=7)

            logger.info(f"üïê 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (UTC): {week_ago}")

            new_users = []
            for user in all_users:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å registration_date - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                registration_date = user.get('registration_date')

                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(
                    f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id')}: "
                    f"registration_date={registration_date}, type={type(registration_date)}"
                )

                if registration_date and isinstance(registration_date, datetime):
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
                    if registration_date >= week_ago:
                        new_users.append(user)
                        logger.info(
                            f"üÜï –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name')} "
                            f"(ID: {user.get('telegram_id')}), —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_date}"
                        )

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(new_users)} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")

        except Exception as db_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {db_error}",
                exc_info=True
            )
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã",
                show_alert=True
            )
            return

        if not new_users:
            logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await callback.answer(
                "‚ÑπÔ∏è –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç",
                show_alert=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = f"üÜï <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {len(new_users)})\n\n"

        for user in new_users[:50]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            username = f"@{user.get('username')}" if user.get('username') else "–Ω–µ—Ç username"
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ datetime –æ–±—ä–µ–∫—Ç–∞
            registration_date = user.get('registration_date_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            text += (
                f"üÜï <b>{user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b> ({username})\n"
                f"   ID: <code>{user.get('telegram_id')}</code>\n"
                f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_date}\n\n"
            )

        if len(new_users) > 50:
            text += f"\n... –∏ –µ—â—ë {len(new_users) - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await callback.message.edit_text(
            text=text,
            reply_markup=get_users_menu()  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        )
        await callback.answer()
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(new_users)}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {callback.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_users_new: {e}",
            exc_info=True
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.message(StateFilter(AdminStates.waiting_user_search))
async def process_user_search(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID, username –∏–ª–∏ –∏–º–µ–Ω–∏.
    """
    try:
        search_query = message.text.strip()
        logger.info(f"üîç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫: '{search_query}'")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await state.set_state(AdminStates.users_menu)

        user_found = None

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ Telegram ID (–µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ)
        if search_query.isdigit():
            try:
                telegram_id = int(search_query)
                user_found = await get_user_by_telegram_id(telegram_id)
                logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ Telegram ID {telegram_id}: {'–Ω–∞–π–¥–µ–Ω' if user_found else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            except Exception as search_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ ID: {search_error}")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID –∏–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ - –∏—â–µ–º –ø–æ username/–∏–º–µ–Ω–∏
        if not user_found:
            try:
                all_users = await get_all_users(limit=1000)

                # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –µ—Å—Ç—å
                search_clean = search_query.lstrip('@').lower()

                for user in all_users:
                    # –ü–æ–∏—Å–∫ –ø–æ username
                    if user.get('username') and user.get('username').lower() == search_clean:
                        user_found = user
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ username: @{user.get('username')}")
                        break

                    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                    if user.get('first_name') and search_query.lower() in user.get('first_name', '').lower():
                        user_found = user
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏: {user.get('first_name')}")
                        break

            except Exception as search_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {search_error}", exc_info=True)
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=get_users_menu()
                )
                return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        if not user_found:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '<code>{search_query}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                reply_markup=get_users_menu()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        status_emoji = "üö´" if user_found.get('is_blocked') else "‚úÖ"
        username = f"@{user_found.get('username')}" if user_found.get('username') else "–Ω–µ—Ç username"

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∞—Ç
        text = (
            f"üîç <b>–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n"
            f"{status_emoji} <b>{user_found.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} {user_found.get('last_name', '')}</b>\n"
            f"Username: {username}\n"
            f"Telegram ID: <code>{user_found.get('telegram_id')}</code>\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_found.get('registration_date_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_found.get('last_activity_str', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user_found.get('is_blocked') else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
        )

        if user_found.get('is_blocked') and user_found.get('block_reason'):
            text += f"–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {user_found.get('block_reason')}\n"

        await message.answer(
            text=text,
            reply_markup=get_users_menu()
        )
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {message.from_user.id}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_user_search: {e}",
            exc_info=True
        )
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞",
            reply_markup=get_users_menu()
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ–Ω—é
        await state.set_state(AdminStates.users_menu)


@router.callback_query(F.data.startswith("user_block_"))
async def block_user_action(callback: CallbackQuery):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(callback.data.replace("user_block_", ""))

    success = await block_user(user_id)

    if success:
        logger.info(f"üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("user_unblock_"))
async def unblock_user_action(callback: CallbackQuery):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(callback.data.replace("user_unblock_", ""))
    
    success = await unblock_user(user_id)
    
    if success:
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)


# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–û–ú ==========

@router.callback_query(F.data == "admin_content")
async def show_content_menu(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #4: –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    try:
        logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

        await state.set_state(AdminStates.content_management)

        text = (
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )

        await callback.message.edit_text(
            text=text,
            reply_markup=get_content_menu()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("content_"))
async def handle_content_section(callback: CallbackQuery):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò #4: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    –†–∞–Ω–µ–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±–æ–π —Ä–∞–∑–¥–µ–ª (content_general, content_sales, content_sport –∏ –¥—Ä.)
    –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º—É "–¥—É–º–∞–Ω–∏—é" –±–æ—Ç–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.

    –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º,
    —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
    """
    section = callback.data.replace("content_", "")

    logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª '{section}'")

    section_names = {
        "general": "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "sales": "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂",
        "sport": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª",
        "upload_video": "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ",
        "upload_doc": "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    }

    section_name = section_names.get(section, section)

    text = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {section_name}</b>\n\n"
        "‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ "
        "–≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–ü–æ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ –ü—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON-—Ñ–∞–π–ª–æ–≤ –≤ content/texts/\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞ –≤ content/media/\n\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–º–æ—â–∏."
    )

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_admin()
        )
        await callback.answer()
        logger.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}'")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ content_{section}: {e}", exc_info=True)
        await callback.answer(
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            show_alert=True
        )


# ========== –†–ê–°–°–´–õ–ö–ê ==========

@router.callback_query(F.data == "admin_broadcast")
async def show_broadcast_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.set_state(AdminStates.broadcast_menu)
    
    text = (
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_broadcast_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("broadcast_send_"))
async def send_broadcast(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –í–´–®–ï process_broadcast_target.
    –†–∞–Ω–µ–µ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback "broadcast_send_all"
    —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –≤ process_broadcast_target, –≥–¥–µ target = "send_all"
    –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–¥–∞–≤–∞–ª –æ—à–∏–±–∫—É "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è".
    """
    try:
        logger.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏")

        data = await state.get_data()
        broadcast_text = data.get("broadcast_text")
        target = data.get("broadcast_target")

        logger.info(f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {target}, —Ç–µ–∫—Å—Ç: {broadcast_text[:50] if broadcast_text else 'None'}...")

        await state.set_state(AdminStates.broadcast_sending)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if target == "all":
            users = await get_all_users()
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(users) if users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ '–≤—Å–µ–º'")
        elif target == "active":
            users = await get_all_users()  # TODO: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(users) if users else 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            users = []
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {target}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        success_count = 0
        fail_count = 0

        await callback.message.edit_text("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")

        for user in users:
            if user.get('is_blocked'):
                continue

            try:
                await callback.bot.send_message(
                    chat_id=user.get('telegram_id'),
                    text=f"üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n{broadcast_text}"
                )
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get('telegram_id')}: {e}")
                fail_count += 1

        logger.info(
            f"üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É. "
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {fail_count}"
        )

        result_text = (
            "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫: {fail_count}"
        )

        await callback.message.edit_text(
            text=result_text,
            reply_markup=get_back_to_admin()
        )
        await state.set_state(AdminStates.authorized)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("broadcast_"))
async def process_broadcast_target(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "send_" –≤ –Ω–∞—á–∞–ª–µ target.
    –†–∞–Ω–µ–µ callback_data "broadcast_send_all" —Ç–∞–∫–∂–µ –ø–æ–ø–∞–¥–∞–ª –≤ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫,
    –Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è "broadcast_" –ø–æ–ª—É—á–∞–ª–æ—Å—å target="send_all", –∫–æ—Ç–æ—Ä–æ–µ
    –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–æ –Ω–∏ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–¥–∞–≤–∞–ª–æ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è".

    –¢–µ–ø–µ—Ä—å —Ç–∞–∫–∏–µ callback –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è, —Ç.–∫. –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ send_broadcast –≤—ã—à–µ.
    """
    target = callback.data.replace("broadcast_", "")

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback'–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ)
    if target.startswith("send_"):
        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º broadcast_send_ callback –≤ process_broadcast_target")
        return

    logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏: {target}")

    if target == "history":
        await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    try:
        if target == "all":
            count = await get_active_users_count()
            target_text = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è '–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': {count} —á–µ–ª.")
        elif target == "sales":
            count = 0  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º
            target_text = "–æ—Ç–¥–µ–ª—É –ø—Ä–æ–¥–∞–∂"
            logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏—Ç–æ—Ä–∏—è '–æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        elif target == "sport":
            count = 0
            target_text = "—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º—É –æ—Ç–¥–µ–ª—É"
            logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏—Ç–æ—Ä–∏—è '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        elif target == "active":
            count = await get_active_users_count()
            target_text = "–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è '–∞–∫—Ç–∏–≤–Ω—ã–µ': {count} —á–µ–ª.")
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {target}")
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", show_alert=True)
            return

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ '{target}': {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏", show_alert=True)
        return
    
    await state.update_data(broadcast_target=target, broadcast_count=count)
    await state.set_state(AdminStates.broadcast_waiting_text)
    
    text = (
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞: {target_text}</b>\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {count} —á–µ–ª.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;</code>\n"
        "‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
        "‚Ä¢ <code>&lt;code&gt;–∫–æ–¥&lt;/code&gt;</code>"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_cancel_button()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.message(StateFilter(AdminStates.broadcast_waiting_text))
async def confirm_broadcast(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    broadcast_text = message.text
    data = await state.get_data()
    
    target = data.get("broadcast_target")
    count = data.get("broadcast_count", 0)
    
    await state.update_data(broadcast_text=broadcast_text)
    await state.set_state(AdminStates.broadcast_confirm)
    
    text = (
        "üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É</b>\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {count} —á–µ–ª.\n\n"
        "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{broadcast_text}\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å?"
    )
    
    await message.answer(
        text=text,
        reply_markup=get_broadcast_confirm(target, count)
    )


# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ send_broadcast —É–¥–∞–ª–µ–Ω, —Ç.–∫. –Ω–æ–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã—à–µ (—Å—Ç—Ä–æ–∫–∞ 784)
# —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫


# ========== –õ–û–ì–ò ==========

@router.callback_query(F.data == "admin_logs")
async def show_logs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    await callback.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
