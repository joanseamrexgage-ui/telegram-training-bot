"""
Handler –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª".

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å:
- –û–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–¥–µ–ª–µ
- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
- –ü—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –î–µ–π—Å—Ç–≤–∏—è–º–∏ –ø—Ä–∏ —Ç—Ä–∞–≤–º–∞—Ö
- –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
"""

import json
from pathlib import Path

from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from keyboards.sport_kb import (
    get_sport_menu,
    get_sport_general_menu,
    get_equipment_menu,
    get_safety_menu,
    get_injury_menu,
    get_back_to_sport,
    get_back_to_sport_general,
    get_back_to_equipment,
    get_back_to_safety,
    get_back_to_injury
)
from states.menu_states import MenuStates
from utils.logger import logger

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router(name='sport')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ JSON
CONTENT_PATH = Path(__file__).parent.parent / "content" / "texts" / "sport.json"

try:
    with open(CONTENT_PATH, 'r', encoding='utf-8') as f:
        CONTENT = json.load(f)
    logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç sport.json –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except FileNotFoundError:
    logger.error(f"‚ùå –§–∞–π–ª {CONTENT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    CONTENT = {}
except json.JSONDecodeError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    CONTENT = {}


# ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –†–ê–ó–î–ï–õ–ê ==========

@router.callback_query(F.data == "sport")
async def show_sport_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª"."""
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª'")

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò: –±—ã–ª–æ MenuStates.sport_menu (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: MenuStates.sport_department (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ states/menu_states.py:85)
    await state.set_state(MenuStates.sport_department)

    main_menu_text = CONTENT.get("main_menu", {})
    text = (
        f"<b>{main_menu_text.get('title', 'üü° –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª')}</b>\n\n"
        f"{main_menu_text.get('description', '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:')}"
    )

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_sport_menu()
        )
        await callback.answer()
        logger.info(f"–ú–µ–Ω—é '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª' —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    except Exception as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –ø–æ–ª–Ω—ã–º traceback
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_sport_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# ========== –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ==========

@router.callback_query(F.data == "sport_general")
async def show_sport_general_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–¥–µ–ª–µ."""
    general_info = CONTENT.get("general_info", {})
    
    text = (
        f"<b>{general_info.get('title', 'üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_sport_general_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_sport_general_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("sport_gen_"))
async def show_general_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    section = callback.data.replace("sport_gen_", "")
    
    general_info = CONTENT.get("general_info", {})
    
    section_mapping = {
        "structure": "org_structure",
        "appearance": "appearance",
        "rules": "work_rules",
        "physical": "physical_requirements",
        "schedule": "schedule",
        "chats": "chats"
    }
    
    section_key = section_mapping.get(section)
    if not section_key:
        await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    section_data = general_info.get(section_key, {})
    text = f"<b>{section_data.get('title', '')}</b>\n\n"
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
    if section == "structure":
        for position in section_data.get("positions", []):
            text += f"<b>{position.get('role')}</b>\n"
            if 'name' in position:
                text += f"üë§ {position.get('name')}\n"
            if 'count' in position:
                text += f"üë• {position.get('count')}\n"
            if 'phone' in position:
                text += f"üì± <a href='tel:{position.get('phone')}'>{position.get('phone')}</a>\n"
            text += f"\nüìã <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n{position.get('responsibilities', '')}\n\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        text += f"<b>–ò–µ—Ä–∞—Ä—Ö–∏—è:</b>\n{section_data.get('hierarchy', '')}"
    
    elif section == "appearance":
        dress_code = section_data.get("dress_code", {})
        text += f"<b>{dress_code.get('title', '')}</b>\n\n"
        text += "\n".join(dress_code.get("requirements", []))
        text += "\n\n<b>‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ:</b>\n"
        text += "\n".join(dress_code.get("forbidden", []))
        text += f"\n\n{section_data.get('safety_gear', '')}"
        text += f"\n\n{section_data.get('hygiene', '')}"
    
    elif section == "rules":
        text += "<b>üì• –ü—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É:</b>\n"
        text += "\n".join(section_data.get("arrival", []))
        text += "\n\n<b>‚öôÔ∏è –í–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã:</b>\n"
        text += "\n".join(section_data.get("during_shift", []))
        text += "\n\n<b>üì§ –£—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã:</b>\n"
        text += "\n".join(section_data.get("departure", []))
    
    elif section == "physical":
        text += "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        text += "\n".join(section_data.get("requirements", []))
        text += f"\n\n{section_data.get('medical', '')}"
    
    elif section == "schedule":
        text += f"{section_data.get('description', '')}\n\n"
        text += "\n".join(section_data.get("shifts", []))
        text += f"\n\n<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫:</b>\n{section_data.get('link', '')}"
    
    elif section == "chats":
        for chat in section_data.get("list", []):
            text += f"<b>{chat.get('name')}</b>\n"
            text += f"üîó {chat.get('link')}\n"
            text += f"üìã <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {chat.get('purpose')}\n\n"
            if 'rules' in chat:
                text += "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
                text += "\n".join(chat.get('rules'))
                text += "\n\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    
    try:
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_sport_general()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_sport_general(),
                disable_web_page_preview=True
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_general_info: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# ========== –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Æ ==========

@router.callback_query(F.data == "sport_equipment")
async def show_equipment_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é."""
    text = "<b>‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_equipment_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_equipment_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("sport_equip_"))
async def show_equipment_instructions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é."""
    equipment_type = callback.data.replace("sport_equip_", "")
    
    equipment_data = CONTENT.get("equipment", {})
    
    type_mapping = {
        "trampoline": "trampoline",
        "climbing": "climbing_wall",
        "rope": "rope_park",
        "games": "game_machines",
        "labyrinth": "labyrinth"
    }
    
    equip_key = type_mapping.get(equipment_type)
    if not equip_key:
        await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    equip_info = equipment_data.get(equip_key, {})
    
    text = f"<b>{equip_info.get('title', '')}</b>\n\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    video_file = equip_info.get("video_instruction")
    if video_file:
        video_path = Path(__file__).parent.parent / "content" / "media" / "videos" / video_file
        try:
            if video_path.exists():
                await callback.message.answer_video(
                    video=FSInputFile(video_path),
                    caption=f"üé¨ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {equip_info.get('title')}"
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if 'startup' in equip_info:
        text += "\n".join(equip_info['startup'])
        text += "\n\n"
    
    if 'belay_system' in equip_info:
        text += "\n".join(equip_info['belay_system'])
        text += "\n\n"
    
    if 'equipment' in equip_info:
        text += "\n".join(equip_info['equipment'])
        text += "\n\n"
    
    if 'instructor_training' in equip_info:
        text += "\n".join(equip_info['instructor_training'])
        text += "\n\n"
    
    if 'rules' in equip_info:
        text += "\n".join(equip_info['rules'])
        text += "\n\n"
    
    if 'instructor_actions' in equip_info:
        text += "\n".join(equip_info['instructor_actions'])
        text += "\n\n"
    
    if 'rescue' in equip_info:
        text += "<b>üöÅ –°–ø–∞—Å–µ–Ω–∏–µ –∑–∞—Å—Ç—Ä—è–≤—à–µ–≥–æ:</b>\n"
        text += "\n".join(equip_info['rescue'])
        text += "\n\n"
    
    if 'emergency' in equip_info:
        text += f"{equip_info['emergency']}\n\n"
    
    if 'common_issues' in equip_info:
        text += "\n".join(equip_info['common_issues'])
        text += "\n\n"
    
    if 'max_weight' in equip_info:
        text += f"{equip_info['max_weight']}\n\n"
    
    if 'lost_child' in equip_info:
        text += "\n".join(equip_info['lost_child'])
    
    try:
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_equipment()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_equipment()
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_equipment_instructions: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# ========== –ü–†–ê–í–ò–õ–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ==========

@router.callback_query(F.data == "sport_safety")
async def show_safety_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    text = "<b>üõ°Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_safety_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_safety_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("sport_safety_"))
async def show_safety_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    safety_type = callback.data.replace("sport_safety_", "")
    
    safety_data = CONTENT.get("safety_rules", {})
    
    text = f"<b>{safety_data.get('title', 'üõ°Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')}</b>\n\n"
    
    if safety_type == "general":
        text += "\n".join(safety_data.get("general", []))
    elif safety_type == "prohibited":
        text += "\n".join(safety_data.get("prohibited", []))
    elif safety_type == "age":
        text += "\n".join(safety_data.get("age_restrictions", []))
    elif safety_type == "weight":
        text += "\n".join(safety_data.get("weight_limits", []))
    
    try:
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_safety()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_safety()
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_safety_rules: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# ========== –î–ï–ô–°–¢–í–ò–Ø –ü–†–ò –¢–†–ê–í–ú–ê–• ==========

@router.callback_query(F.data == "sport_injury")
async def show_injury_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ —Ç—Ä–∞–≤–º–∞—Ö."""
    text = "<b>üè• –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ç—Ä–∞–≤–º–∞—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_injury_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_injury_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("sport_injury_"))
async def show_injury_instructions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–∫–∞–∑–∞–Ω–∏—é –ø–æ–º–æ—â–∏."""
    injury_type = callback.data.replace("sport_injury_", "")
    
    injury_data = CONTENT.get("injury_response", {})
    
    type_mapping = {
        "kit": "first_aid_kit",
        "minor": "minor_injuries",
        "serious": "serious_injuries",
        "cpr": "cpr",
        "psych": "psychological_help"
    }
    
    injury_key = type_mapping.get(injury_type)
    if not injury_key:
        await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"<b>{injury_data.get('title', 'üè• –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ç—Ä–∞–≤–º–∞—Ö')}</b>\n\n"
    text += "\n".join(injury_data.get(injury_key, []))
    
    try:
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_injury()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_injury()
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_injury_instructions: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# ========== –≠–ö–°–¢–†–ï–ù–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´ ==========

@router.callback_query(F.data == "sport_contacts")
async def show_emergency_contacts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã."""
    contacts_data = CONTENT.get("emergency_contacts", {})
    
    text = f"<b>{contacts_data.get('title', 'üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã')}</b>\n\n"
    text += "\n".join(contacts_data.get("services", []))
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_sport(),
            disable_web_page_preview=True
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_emergency_contacts: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
