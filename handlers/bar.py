"""
Handler –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ë–ê–†".

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∞—Ä–æ–º:
- –ú–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤
- –¶–µ–Ω—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
- –†–µ—Ü–µ–ø—Ç—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –°–∫–∏–¥–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
- –ü—Ä–∞–≤–∏–ª–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
"""

import json
from pathlib import Path

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup

from states.menu_states import MenuStates
from utils.logger import logger

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router(name='bar')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ JSON
CONTENT_PATH = Path(__file__).parent.parent / "content" / "texts" / "bar_menu.json"

try:
    with open(CONTENT_PATH, 'r', encoding='utf-8') as f:
        CONTENT = json.load(f)
    logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç bar_menu.json –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except FileNotFoundError:
    logger.error(f"‚ùå –§–∞–π–ª {CONTENT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    CONTENT = {}
except json.JSONDecodeError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    CONTENT = {}


def get_bar_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ë–ê–†"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üçπ –ú–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤", callback_data="bar_drinks")
    builder.button(text="üíº –°–∫–∏–¥–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="bar_discount")
    builder.button(text="üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", callback_data="bar_standards")
    builder.button(text="üéØ –ü—Ä–∞–≤–∏–ª–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", callback_data="bar_service")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

    builder.adjust(1)
    return builder.as_markup()


def get_drinks_category_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚òï –ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="bar_drinks_hot")
    builder.button(text="üßä –•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="bar_drinks_cold")
    builder.button(text="üçã –õ–∏–º–æ–Ω–∞–¥—ã", callback_data="bar_drinks_lemonade")
    builder.button(text="ü•§ –ú–∏–ª–∫—à–µ–π–∫–∏ –∏ —Å–º—É–∑–∏", callback_data="bar_drinks_milkshake")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="bar")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")

    builder.adjust(1, 1, 1, 1, 2)
    return builder.as_markup()


def get_back_to_bar() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ë–ê–†"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="bar")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(2)
    return builder.as_markup()


def get_back_to_drinks() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞–ø–∏—Ç–∫–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="bar_drinks")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(2)
    return builder.as_markup()


@router.callback_query(F.data == "bar")
async def show_bar_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ë–ê–†"""
    await state.set_state(MenuStates.main_menu)

    main_menu_text = CONTENT.get("main_menu", {})
    text = (
        f"<b>{main_menu_text.get('title', '‚òï –ë–ê–†')}</b>\n\n"
        f"{main_menu_text.get('description', '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:')}"
    )

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_bar_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_bar_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.callback_query(F.data == "bar_drinks")
async def show_drinks_categories(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤"""
    text = (
        "<b>üçπ –ú–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é:"
    )

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_drinks_category_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_drinks_categories: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("bar_drinks_"))
async def show_drinks_by_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø–∏—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_code = callback.data.replace("bar_drinks_", "")  # hot, cold, lemonade, milkshake

    category_map = {
        "hot": "‚òï –ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏",
        "cold": "üßä –•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏",
        "lemonade": "üçã –õ–∏–º–æ–Ω–∞–¥—ã",
        "milkshake": "ü•§ –ú–∏–ª–∫—à–µ–π–∫–∏ –∏ —Å–º—É–∑–∏"
    }

    drinks_data = CONTENT.get("drinks", {})
    categories = drinks_data.get("categories", [])

    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = None
    for cat in categories:
        if category_map.get(category_code) == cat["name"]:
            category = cat
            break

    if not category:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = f"<b>{category['name']}</b>\n\n"

    for item in category["items"]:
        text += f"<b>{item['name']}</b> ‚Äî {item['price']}\n"
        text += f"‚Ä¢ {item['volume']}\n"
        text += f"‚Ä¢ {item['description']}\n\n"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_drinks()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_drinks_by_category: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤")


@router.callback_query(F.data == "bar_discount")
async def show_employee_discount(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–∞—Ö –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    discount_data = CONTENT.get("employee_discount", {})

    text = f"<b>{discount_data.get('title', 'üíº –°–∫–∏–¥–∫–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')}</b>\n\n"
    text += f"{discount_data.get('description', '')}\n\n"

    for benefit in discount_data.get("benefits", []):
        text += f"{benefit}\n"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_bar()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_employee_discount: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@router.callback_query(F.data == "bar_standards")
async def show_preparation_standards(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤"""
    standards_data = CONTENT.get("standards", {})

    text = f"<b>{standards_data.get('title', 'üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è')}</b>\n\n"
    text += f"{standards_data.get('description', '')}\n\n"

    recipes = standards_data.get("recipes", [])
    for recipe in recipes[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        text += f"<b>{recipe['drink']}</b>\n"
        for step in recipe["steps"]:
            text += f"{step}\n"
        text += f"‚è±Ô∏è –í—Ä–µ–º—è: {recipe['time']}\n"
        text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {recipe['temperature']}\n\n"

    text += "<b>‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</b>\n"
    for check in standards_data.get("quality_check", []):
        text += f"{check}\n"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_bar()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_preparation_standards: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤")


@router.callback_query(F.data == "bar_service")
async def show_service_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    service_data = CONTENT.get("service_rules", {})

    text = f"<b>{service_data.get('title', 'üéØ –ü—Ä–∞–≤–∏–ª–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è')}</b>\n\n"

    for step in service_data.get("steps", []):
        text += f"{step}\n"

    text += "\n<b>üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>\n"
    for tip in service_data.get("tips", []):
        text += f"{tip}\n"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_bar()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_service_rules: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª")
