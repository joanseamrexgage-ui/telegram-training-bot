"""
Handler –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ù–∞–≤–∏–≥–∞—Ü–∏—è".

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –ø–∞—Ä–∫–∞–º:
- –í—ã–±–æ—Ä –ø–∞—Ä–∫–∞
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–æ–Ω –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
- –í–∞–∂–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ (–≤—ã—Ö–æ–¥—ã, –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª–∏, —Ç—É–∞–ª–µ—Ç—ã)
"""

import json
from pathlib import Path

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup

from states.menu_states import MenuStates
from utils.logger import logger

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router(name='navigation')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ JSON
CONTENT_PATH = Path(__file__).parent.parent / "content" / "texts" / "navigation.json"

try:
    with open(CONTENT_PATH, 'r', encoding='utf-8') as f:
        CONTENT = json.load(f)
    logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç navigation.json –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except FileNotFoundError:
    logger.error(f"‚ùå –§–∞–π–ª {CONTENT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    CONTENT = {}
except json.JSONDecodeError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    CONTENT = {}


def get_navigation_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üè¢ –¢–†–¶ –ö–∞—à–∏—Ä—Å–∫–∞—è –ø–ª–∞–∑–∞", callback_data="nav_kashirskaya")
    builder.button(text="üè¢ –¢–†–¶ –ö–æ–ª–∞–º–±—É—Å", callback_data="nav_columbus")
    builder.button(text="üè¢ –¢–†–¶ –ó–µ–ª–µ–Ω–æ–ø–∞—Ä–∫", callback_data="nav_zeleno")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

    builder.adjust(1)
    return builder.as_markup()


def get_back_to_navigation() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∫–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="navigation")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(2)
    return builder.as_markup()


@router.callback_query(F.data == "navigation")
async def show_navigation_menu(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–ù–∞–≤–∏–≥–∞—Ü–∏—è".

    Args:
        callback: Callback –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await state.set_state(MenuStates.main_menu)

    main_menu_text = CONTENT.get("main_menu", {})
    text = (
        f"<b>{main_menu_text.get('title', 'üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è')}</b>\n\n"
        f"{main_menu_text.get('description', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:')}"
    )

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_navigation_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_navigation_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.callback_query(F.data.startswith("nav_"))
async def show_park_navigation(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∫–∞.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback: nav_kashirskaya, nav_columbus, nav_zeleno
    """
    park_code = callback.data.split("_")[1]  # kashirskaya, columbus, zeleno
    logger.info(f"üó∫Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–∞—Ä–∫–∞ '{park_code}'")

    park_info = CONTENT.get(park_code, {})

    if not park_info:
        logger.warning(f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–∞—Ä–∫–∞ '{park_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            show_alert=True
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–∫–µ
    text = f"<b>üó∫Ô∏è {park_info.get('name')}</b>\n\n"
    text += f"<b>üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {park_info.get('floor')}, {park_info.get('location')}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –æ—Ç –≤—Ö–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "navigation_from_entrance" in park_info:
        text += "<b>üö∂ –ö–∞–∫ –Ω–∞–π—Ç–∏ –ø–∞—Ä–∫:</b>\n"
        for step in park_info["navigation_from_entrance"]:
            text += f"{step}\n"
        text += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—ã
    text += "<b>üè¢ –ó–æ–Ω—ã –ø–∞—Ä–∫–∞:</b>\n\n"
    for zone in park_info.get("zones", []):
        text += f"<b>{zone['name']}</b>\n"
        text += f"‚Ä¢ {zone['description']}\n"
        text += f"‚Ä¢ {zone['landmarks']}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    if "important_notes" in park_info:
        text += "<b>‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã:</b>\n"
        for note in park_info["important_notes"]:
            text += f"{note}\n"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_navigation()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_park_navigation: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
