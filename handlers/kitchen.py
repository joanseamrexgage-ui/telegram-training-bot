"""
Handler –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ù–∞—à–∞ –∫—É—Ö–Ω—è".

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—É—Ö–Ω–µ–π:
- –ú–µ–Ω—é –±–ª—é–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
- –°–∫–∏–¥–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
- –ü—Ä–∞–≤–∏–ª–∞ –≥–∏–≥–∏–µ–Ω—ã
"""

import json
from pathlib import Path

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup

from states.menu_states import MenuStates
from utils.logger import logger

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router(name='kitchen')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ JSON
CONTENT_PATH = Path(__file__).parent.parent / "content" / "texts" / "kitchen_menu.json"

try:
    with open(CONTENT_PATH, 'r', encoding='utf-8') as f:
        CONTENT = json.load(f)
    logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç kitchen_menu.json –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except FileNotFoundError:
    logger.error(f"‚ùå –§–∞–π–ª {CONTENT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    CONTENT = {}
except json.JSONDecodeError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    CONTENT = {}


def get_kitchen_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ù–∞—à–∞ –∫—É—Ö–Ω—è"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üìã –ú–µ–Ω—é –±–ª—é–¥", callback_data="kitchen_menu")
    builder.button(text="‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö", callback_data="kitchen_allergens")
    builder.button(text="üìã –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã", callback_data="kitchen_tech_cards")
    builder.button(text="üíº –°–∫–∏–¥–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="kitchen_discount")
    builder.button(text="üßº –ü—Ä–∞–≤–∏–ª–∞ –≥–∏–≥–∏–µ–Ω—ã", callback_data="kitchen_hygiene")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

    builder.adjust(1)
    return builder.as_markup()


def get_menu_categories() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üçï –ü–∏—Ü—Ü–∞", callback_data="kitchen_cat_pizza")
    builder.button(text="üçî –ë—É—Ä–≥–µ—Ä—ã –∏ —Å—ç–Ω–¥–≤–∏—á–∏", callback_data="kitchen_cat_burgers")
    builder.button(text="üçü –ó–∞–∫—É—Å–∫–∏", callback_data="kitchen_cat_snacks")
    builder.button(text="ü•ó –°–∞–ª–∞—Ç—ã", callback_data="kitchen_cat_salads")
    builder.button(text="üç∞ –î–µ—Å–µ—Ä—Ç—ã", callback_data="kitchen_cat_desserts")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="kitchen")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")

    builder.adjust(1, 1, 1, 1, 1, 2)
    return builder.as_markup()


def get_back_to_kitchen() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –∫—É—Ö–Ω–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="kitchen")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(2)
    return builder.as_markup()


def get_back_to_menu() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="kitchen_menu")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(2)
    return builder.as_markup()


@router.callback_query(F.data == "kitchen")
async def show_kitchen_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ù–∞—à–∞ –∫—É—Ö–Ω—è"""
    await state.set_state(MenuStates.main_menu)

    main_menu_text = CONTENT.get("main_menu", {})
    text = (
        f"<b>{main_menu_text.get('title', 'üçΩÔ∏è –ù–∞—à–∞ –∫—É—Ö–Ω—è')}</b>\n\n"
        f"{main_menu_text.get('description', '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:')}"
    )

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_kitchen_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_kitchen_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.callback_query(F.data == "kitchen_menu")
async def show_menu_categories_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥"""
    text = (
        "<b>üìã –ú–µ–Ω—é –±–ª—é–¥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é:"
    )

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_menu_categories()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_menu_categories: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("kitchen_cat_"))
async def show_menu_by_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_code = callback.data.replace("kitchen_cat_", "")

    category_map = {
        "pizza": "üçï –ü–∏—Ü—Ü–∞",
        "burgers": "üçî –ë—É—Ä–≥–µ—Ä—ã –∏ —Å—ç–Ω–¥–≤–∏—á–∏",
        "snacks": "üçü –ó–∞–∫—É—Å–∫–∏",
        "salads": "ü•ó –°–∞–ª–∞—Ç—ã",
        "desserts": "üç∞ –î–µ—Å–µ—Ä—Ç—ã"
    }

    menu_data = CONTENT.get("menu", {})
    categories = menu_data.get("categories", [])

    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = None
    for cat in categories:
        if category_map.get(category_code) == cat["name"]:
            category = cat
            break

    if not category:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = f"<b>{category['name']}</b>\n\n"

    for item in category["items"]:
        text += f"<b>{item['name']}</b> ‚Äî {item['price']}\n"
        text += f"‚Ä¢ –í–µ—Å: {item['weight']}\n"
        text += f"‚Ä¢ {item['description']}\n"

        if item.get("allergens"):
            allergens_str = ", ".join(item["allergens"])
            text += f"‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–µ–Ω—ã: {allergens_str}\n"

        text += "\n"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_menu_by_category: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥")


@router.callback_query(F.data == "kitchen_allergens")
async def show_allergens_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö"""
    allergens_data = CONTENT.get("allergens", {})

    text = f"<b>{allergens_data.get('title', '‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö')}</b>\n\n"
    text += f"{allergens_data.get('description', '')}\n\n"

    text += "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã:</b>\n\n"
    for allergen in allergens_data.get("common_allergens", [])[:4]:  # –ü–µ—Ä–≤—ã–µ 4 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        text += f"<b>{allergen['name']}</b>\n"
        text += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {allergen['sources']}\n"
        text += f"‚Ä¢ {allergen['severity']}\n\n"

    text += "<b>–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–µ–π—Å—Ç–≤–∏–π:</b>\n\n"
    for action in allergens_data.get("action_protocol", [])[:6]:  # –ü–µ—Ä–≤—ã–µ 6 —à–∞–≥–æ–≤
        text += f"{action}\n"

    text += f"\n{allergens_data.get('important', '')}"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_kitchen()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_allergens_info: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@router.callback_query(F.data == "kitchen_tech_cards")
async def show_tech_cards(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã"""
    tech_cards_data = CONTENT.get("tech_cards", {})

    text = f"<b>{tech_cards_data.get('title', 'üìã –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã')}</b>\n\n"
    text += f"{tech_cards_data.get('description', '')}\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
    recipes = tech_cards_data.get("recipes", [])
    if recipes:
        recipe = recipes[0]
        text += f"<b>{recipe['dish']}</b>\n\n"

        text += "<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
        for ingredient in recipe["ingredients"]:
            text += f"{ingredient}\n"

        text += "\n<b>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</b>\n"
        for step in recipe["steps"]:
            text += f"{step}\n"

        text += f"\n‚è±Ô∏è –í—Ä–µ–º—è: {recipe['time']}\n"
        text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {recipe['temperature']}\n"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_kitchen()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_tech_cards: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç")


@router.callback_query(F.data == "kitchen_discount")
async def show_kitchen_discount(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–∞—Ö –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    discount_data = CONTENT.get("employee_discount", {})

    text = f"<b>{discount_data.get('title', 'üíº –°–∫–∏–¥–∫–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')}</b>\n\n"
    text += f"{discount_data.get('description', '')}\n\n"

    for benefit in discount_data.get("benefits", []):
        text += f"{benefit}\n"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_kitchen()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_kitchen_discount: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@router.callback_query(F.data == "kitchen_hygiene")
async def show_hygiene_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≥–∏–≥–∏–µ–Ω—ã"""
    hygiene_data = CONTENT.get("hygiene", {})

    text = f"<b>{hygiene_data.get('title', 'üßº –ü—Ä–∞–≤–∏–ª–∞ –≥–∏–≥–∏–µ–Ω—ã')}</b>\n\n"

    for rule in hygiene_data.get("rules", []):
        text += f"{rule}\n"

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_kitchen()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_hygiene_rules: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª")
