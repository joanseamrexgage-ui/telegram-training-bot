"""
VERSION 2.0: Global Error Handling Middleware

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ —Å:
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ loguru
- –û—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å Sentry (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –û–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
"""

from typing import Callable, Dict, Any, Awaitable
from datetime import datetime

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Update, Message, CallbackQuery
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramNotFound,
    TelegramConflictError,
    TelegramUnauthorizedError,
    TelegramForbiddenError,
    TelegramRetryAfter,
    RestartingTelegram,
)

from utils.logger import logger

# Try to import Sentry if available
try:
    from utils.sentry_config import capture_exception_with_context
    SENTRY_AVAILABLE = True
except ImportError:
    SENTRY_AVAILABLE = False


class ErrorHandlingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫—Ä–∞—à–∞ –±–æ—Ç–∞.
    """

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –æ—à–∏–±–æ–∫

        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            event: –°–æ–±—ã—Ç–∏–µ –æ—Ç Telegram
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            return await handler(event, data)

        except TelegramRetryAfter as e:
            # Rate limit –æ—Ç Telegram - –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
            logger.warning(
                f"‚ö†Ô∏è Telegram Rate Limit: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.retry_after} —Å–µ–∫—É–Ω–¥"
            )
            await self._send_error_message(
                event,
                "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
            )
            return None

        except TelegramBadRequest as e:
            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
            logger.error(f"‚ùå Telegram Bad Request: {e}")

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            error_text = str(e).lower()

            if "message is not modified" in error_text:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                logger.debug("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                return None

            elif "message to edit not found" in error_text:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None

            elif "message can't be deleted" in error_text:
                # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return None

            else:
                # –î—Ä—É–≥–∏–µ Bad Request –æ—à–∏–±–∫–∏
                await self._send_error_message(
                    event,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                self._log_error_details(e, event, data)
                return None

        except TelegramForbiddenError as e:
            # –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            return None

        except TelegramUnauthorizedError as e:
            # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω)
            logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {e}")
            return None

        except TelegramNotFound as e:
            # –°—É—â–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—á–∞—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
            return None

        except TelegramConflictError as e:
            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–≤–∞ –±–æ—Ç–∞ —Å –æ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º)
            logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ö–æ–Ω—Ñ–ª–∏–∫—Ç Telegram: {e}")
            return None

        except RestartingTelegram:
            # Telegram –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            logger.warning("‚ö†Ô∏è Telegram –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∑–∂–µ")
            return None

        except ValueError as e:
            # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            await self._send_error_message(
                event,
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥."
            )
            self._log_error_details(e, event, data)
            return None

        except KeyError as e:
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –≤ –¥–∞–Ω–Ω—ã—Ö
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á: {e}")
            await self._send_error_message(
                event,
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
            )
            self._log_error_details(e, event, data)
            return None

        except Exception as e:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            logger.exception(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

            await self._send_error_message(
                event,
                "üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

            self._log_error_details(e, event, data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Sentry –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if SENTRY_AVAILABLE:
                try:
                    user_id = self._extract_user_id(event)
                    capture_exception_with_context(
                        exception=e,
                        user_id=user_id,
                        extra={
                            "event_type": type(event).__name__,
                            "timestamp": datetime.utcnow().isoformat(),
                        }
                    )
                except Exception as sentry_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Sentry: {sentry_error}")

            return None

    async def _send_error_message(
        self,
        event: TelegramObject,
        text: str
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        """

        try:
            if isinstance(event, Message):
                await event.answer(text)

            elif isinstance(event, CallbackQuery):
                # –î–ª—è callback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
                await event.answer(text, show_alert=True)

                # –ò –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                try:
                    await event.message.answer(text)
                except Exception:
                    pass

        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

    def _log_error_details(
        self,
        exception: Exception,
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏

        Args:
            exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        """

        user_id = self._extract_user_id(event)
        event_type = type(event).__name__

        logger.error(
            f"Error Details:\n"
            f"  Exception: {type(exception).__name__}\n"
            f"  Message: {str(exception)}\n"
            f"  User ID: {user_id}\n"
            f"  Event Type: {event_type}\n"
            f"  Timestamp: {datetime.utcnow().isoformat()}"
        )

    def _extract_user_id(self, event: TelegramObject) -> int | None:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è

        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram

        Returns:
            User ID –∏–ª–∏ None
        """

        try:
            if hasattr(event, 'from_user') and event.from_user:
                return event.from_user.id
            elif hasattr(event, 'message') and event.message:
                if hasattr(event.message, 'from_user') and event.message.from_user:
                    return event.message.from_user.id
        except Exception:
            pass

        return None


__all__ = ["ErrorHandlingMiddleware"]
