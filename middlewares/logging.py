"""
Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏ –º–µ–Ω—é
"""

from typing import Callable, Dict, Any, Awaitable

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.crud import log_user_activity
from utils.logger import logger


class LoggingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î –¥–ª—è:
    - –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    - –û—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ middleware.
        
        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ü–µ–ø–æ—á–∫–µ
            event: –°–æ–±—ã—Ç–∏–µ –æ—Ç Telegram (Message –∏–ª–∏ CallbackQuery)
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–º–∏ –º–µ–∂–¥—É middlewares
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è handler
        """
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
        user = None
        action = None
        section = None
        
        if isinstance(event, Message):
            user = event.from_user
            action = "message"
            section = event.text[:50] if event.text else "media"
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username}): "
                f"{event.text[:100] if event.text else '[–º–µ–¥–∏–∞]'}"
            )
            
        elif isinstance(event, CallbackQuery):
            user = event.from_user
            action = "callback"
            section = event.data[:50] if event.data else "unknown"
            
            # –õ–æ–≥–∏—Ä—É–µ–º callback
            logger.info(
                f"üîò Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username}): "
                f"{event.data}"
            )
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not user:
            return await handler(event, data)

        telegram_id = user.id

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π user_id –∏–∑ –ë–î (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è AuthMiddleware)
        # user_id –∏–∑ –ë–î –Ω—É–∂–µ–Ω –¥–ª—è foreign key –≤ UserActivity
        db_user = data.get('db_user')
        if not db_user:
            logger.warning(f"‚ö†Ô∏è db_user –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return await handler(event, data)

        internal_user_id = db_user.id  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–µ—Å–ª–∏ –µ—Å—Ç—å)
        state_name = None
        if 'state' in data:
            state: FSMContext = data.get('state')
            if state:
                try:
                    current_state = await state.get_state()
                    if current_state:
                        state_name = current_state
                        logger.debug(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {state_name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ë–î
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ log_user_activity
            # –§—É–Ω–∫—Ü–∏—è –ù–ï –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'state', –∏—Å–ø–æ–ª—å–∑—É–µ–º 'details' –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            details_dict = {}
            if state_name:
                details_dict['fsm_state'] = state_name

            # –î–ª—è callback - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            callback_data_str = None
            message_text_str = None

            if isinstance(event, CallbackQuery) and event.data:
                callback_data_str = event.data
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º section –ø–æ callback_data –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
                if event.data.startswith("general_info"):
                    section = "general_info"
                elif event.data.startswith("sales"):
                    section = "sales"
                elif event.data.startswith("sport"):
                    section = "sport"
                elif event.data.startswith("admin"):
                    section = "admin"
                elif event.data.startswith("tests"):
                    section = "tests"
                else:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å callback_data –∫–∞–∫ section
                    section = event.data.split('_')[0] if '_' in event.data else event.data[:50]

            elif isinstance(event, Message):
                message_text_str = event.text[:255] if event.text else None

            await log_user_activity(
                user_id=internal_user_id,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –ë–î
                action=action,
                section=section,
                details=details_dict if details_dict else None,
                callback_data=callback_data_str,
                message_text=message_text_str
            )

            logger.info(
                f"üìù –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: telegram_id={telegram_id}, internal_id={internal_user_id}, "
                f"action={action}, section={section}, callback={callback_data_str}"
            )
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}"
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º handler –∏ –∑–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        import time
        start_time = time.time()
        
        try:
            result = await handler(event, data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            if execution_time > 1000:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ > 1 —Å–µ–∫—É–Ω–¥—ã
                logger.warning(
                    f"‚è±Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {execution_time:.2f}ms "
                    f"–¥–ª—è {action} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}"
                )
            else:
                logger.debug(
                    f"‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.2f}ms"
                )
            
            return result
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ handler
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}",
                exc_info=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                error_message = (
                    "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
                    "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
                if isinstance(event, Message):
                    await event.answer(error_message)
                elif isinstance(event, CallbackQuery):
                    await event.answer(
                        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        show_alert=True
                    )
            except Exception as notify_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ: {notify_error}")
            
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            raise
