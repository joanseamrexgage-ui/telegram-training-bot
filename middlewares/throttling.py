"""
Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ (throttling/rate limiting).

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ó–∞—â–∏—Ç—É –æ—Ç —Ñ–ª—É–¥–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
- –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ DDoS –∞—Ç–∞–∫ –Ω–∞ –±–æ—Ç–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–ø–∞–º–µ—Ä–æ–≤
"""

from typing import Callable, Dict, Any, Awaitable
import time

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery

from utils.logger import logger


class ThrottlingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç in-memory —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è production –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 2.0 —Å–µ–∫—É–Ω–¥—ã (VERSION 2.0)
    - –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π: 5
    - –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: 60 —Å–µ–∫—É–Ω–¥
    """
    
    def __init__(
        self,
        default_rate: float = 2.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫) - VERSION 2.0
        max_warnings: int = 5,       # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        block_duration: int = 60     # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (—Å–µ–∫)
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware.
        
        Args:
            default_rate: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_warnings: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            block_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        super().__init__()
        self.default_rate = default_rate
        self.max_warnings = max_warnings
        self.block_duration = block_duration
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        # –í production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis
        self.last_request_time: Dict[int, float] = {}
        self.warnings: Dict[int, int] = {}
        self.blocked_users: Dict[int, float] = {}  # user_id: block_end_time
    
    def _is_blocked(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, False –∏–Ω–∞—á–µ
        """
        if user_id not in self.blocked_users:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        block_end_time = self.blocked_users[user_id]
        current_time = time.time()
        
        if current_time >= block_end_time:
            # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
            del self.blocked_users[user_id]
            self.warnings[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            logger.info(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return False
        
        return True
    
    def _block_user(self, user_id: int) -> None:
        """
        –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        block_end_time = time.time() + self.block_duration
        self.blocked_users[user_id] = block_end_time
        
        logger.warning(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º "
            f"–Ω–∞ {self.block_duration} —Å–µ–∫—É–Ω–¥"
        )
    
    def _check_throttle(self, user_id: int) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç—ã.
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (allowed, message):
                - allowed: True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                - message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
        """
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if self._is_blocked(user_id):
            remaining_time = int(self.blocked_users[user_id] - current_time)
            message = (
                f"‚è≥ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫."
            )
            return False, message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if user_id in self.last_request_time:
            time_since_last = current_time - self.last_request_time[user_id]
            
            if time_since_last < self.default_rate:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
                self.warnings[user_id] = self.warnings.get(user_id, 0) + 1
                warnings_count = self.warnings[user_id]
                
                logger.warning(
                    f"‚ö†Ô∏è Throttling: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} "
                    f"(–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings_count}/{self.max_warnings})"
                )
                
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π - –±–ª–æ–∫–∏—Ä—É–µ–º
                if warnings_count >= self.max_warnings:
                    self._block_user(user_id)
                    message = (
                        f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ {self.block_duration} —Å–µ–∫.\n"
                        f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!"
                    )
                    return False, message
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                message = (
                    f"‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏.\n"
                    f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings_count}/{self.max_warnings}"
                )
                return False, message
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.last_request_time[user_id] = current_time
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ–¥–µ—Ç —Å–µ–±—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if user_id in self.warnings and self.warnings[user_id] > 0:
            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            self.warnings[user_id] = max(0, self.warnings[user_id] - 1)
        
        return True, ""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ middleware.
        
        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ü–µ–ø–æ—á–∫–µ
            event: –°–æ–±—ã—Ç–∏–µ –æ—Ç Telegram (Message –∏–ª–∏ CallbackQuery)
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–º–∏ –º–µ–∂–¥—É middlewares
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è handler –∏–ª–∏ None (–µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
        """
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
        user = None
        if isinstance(event, Message):
            user = event.from_user
        elif isinstance(event, CallbackQuery):
            user = event.from_user
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not user:
            return await handler(event, data)
        
        user_id = user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º throttling
        allowed, warning_message = self._check_throttle(user_id)
        
        if not allowed:
            # –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            try:
                if isinstance(event, Message):
                    await event.answer(warning_message)
                elif isinstance(event, CallbackQuery):
                    await event.answer(warning_message, show_alert=True)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ throttling: {e}")
            
            # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É handler
            return None
        
        # –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω - –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)
