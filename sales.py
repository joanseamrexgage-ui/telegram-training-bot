"""
Handler –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂".

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å:
- –û–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–¥–µ–ª–µ
- –û—Ç–∫—Ä—ã—Ç–∏–µ–º –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–∞—Ä–∫–∞
- –†–∞–±–æ—Ç–æ–π —Å –∫–∞—Å—Å–æ–π
- –†–∞–±–æ—Ç–æ–π —Å amoCRM
- –†–∞–±–æ—Ç–æ–π —Å –≥–æ—Å—Ç—è–º–∏
- –ë–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –æ –º–æ—à–µ–Ω–Ω–∏–∫–∞—Ö

–≠—Ç–æ —Å–∞–º—ã–π –æ–±—ä–µ–º–Ω—ã–π handler –≤ –ø—Ä–æ–µ–∫—Ç–µ.
"""

import json
from pathlib import Path

from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from keyboards.sales_kb import (
    get_sales_menu,
    get_sales_general_menu,
    get_opening_closing_menu,
    get_cash_register_menu,
    get_crm_menu,
    get_guests_menu,
    get_sales_scripts_menu,
    get_fraud_menu,
    get_back_to_sales,
    get_back_to_sales_general,
    get_back_to_opening,
    get_back_to_cash,
    get_back_to_crm,
    get_back_to_guests,
    get_back_to_scripts,
    get_back_to_fraud
)
from states.menu_states import MenuStates
from utils.logger import logger

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router(name='sales')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ JSON
CONTENT_PATH = Path(__file__).parent.parent / "content" / "texts" / "sales.json"

try:
    with open(CONTENT_PATH, 'r', encoding='utf-8') as f:
        CONTENT = json.load(f)
    logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç sales.json –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except FileNotFoundError:
    logger.error(f"‚ùå –§–∞–π–ª {CONTENT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    CONTENT = {}
except json.JSONDecodeError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    CONTENT = {}


# ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –†–ê–ó–î–ï–õ–ê ==========

@router.callback_query(F.data == "sales")
async def show_sales_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂"."""
    await state.set_state(MenuStates.sales_menu)
    
    main_menu_text = CONTENT.get("main_menu", {})
    text = (
        f"<b>{main_menu_text.get('title', 'üî¥ –û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂')}</b>\n\n"
        f"{main_menu_text.get('description', '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:')}"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_sales_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_sales_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# ========== –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ==========

@router.callback_query(F.data == "sales_general")
async def show_sales_general_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–¥–µ–ª–µ."""
    general_info = CONTENT.get("general_info", {})
    
    text = (
        f"<b>{general_info.get('title', 'üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_sales_general_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_sales_general_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data == "sales_gen_structure")
async def show_org_structure(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–¥–µ–ª–∞."""
    general_info = CONTENT.get("general_info", {})
    structure = general_info.get("org_structure", {})
    
    text = f"<b>{structure.get('title', 'üë• –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞')}</b>\n\n"
    
    positions = structure.get("positions", [])
    for position in positions:
        text += f"<b>{position.get('role')}</b>\n"
        if 'name' in position:
            text += f"üë§ {position.get('name')}\n"
        if 'count' in position:
            text += f"üë• {position.get('count')}\n"
        if 'phone' in position:
            text += f"üì± <a href='tel:{position.get('phone')}'>{position.get('phone')}</a>\n"
        text += f"\nüìã <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n{position.get('responsibilities', '')}\n\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    
    text += f"<b>–ò–µ—Ä–∞—Ä—Ö–∏—è:</b>\n{structure.get('hierarchy', '')}"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_sales_general(),
            disable_web_page_preview=True
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_org_structure: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@router.callback_query(F.data == "sales_gen_appearance")
async def show_appearance(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–º—É –≤–∏–¥—É."""
    general_info = CONTENT.get("general_info", {})
    appearance = general_info.get("appearance", {})
    dress_code = appearance.get("dress_code", {})
    
    text = f"<b>{appearance.get('title', 'üëî –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')}</b>\n\n"
    
    text += f"<b>{dress_code.get('title', '–î—Ä–µ—Å—Å-–∫–æ–¥:')}</b>\n\n"
    text += "\n".join(dress_code.get("requirements", []))
    text += "\n\n<b>‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ:</b>\n"
    text += "\n".join(dress_code.get("forbidden", []))
    text += f"\n\n{appearance.get('hygiene', '')}"
    text += f"\n\n{appearance.get('badge', '')}"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_sales_general()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_appearance: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@router.callback_query(F.data == "sales_gen_rules")
async def show_work_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞."""
    general_info = CONTENT.get("general_info", {})
    rules = general_info.get("work_rules", {})
    
    text = f"<b>{rules.get('title', '‚è∞ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞')}</b>\n\n"
    
    text += "<b>üì• –ü—Ä–∏—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É:</b>\n"
    text += "\n".join(rules.get("arrival", []))
    
    text += "\n\n<b>‚öôÔ∏è –í–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã:</b>\n"
    text += "\n".join(rules.get("during_shift", []))
    
    text += "\n\n<b>üì§ –£—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã:</b>\n"
    text += "\n".join(rules.get("departure", []))
    
    text += f"\n\n{rules.get('punctuality', '')}"
    
    try:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_sales_general()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_sales_general()
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_work_rules: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@router.callback_query(F.data == "sales_gen_atmosphere")
async def show_atmosphere(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ."""
    general_info = CONTENT.get("general_info", {})
    atmosphere = general_info.get("atmosphere", {})
    
    text = f"<b>{atmosphere.get('title', 'üåü –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ')}</b>\n\n"
    
    text += "<b>–ù–∞—à–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
    text += "\n".join(atmosphere.get("values", []))
    
    text += "\n\n<b>–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:</b>\n"
    text += "\n".join(atmosphere.get("rules", []))
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_sales_general()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_atmosphere: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@router.callback_query(F.data == "sales_gen_schedule")
async def show_schedule(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã."""
    general_info = CONTENT.get("general_info", {})
    schedule = general_info.get("schedule", {})
    
    text = f"<b>{schedule.get('title', 'üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã')}</b>\n\n"
    text += f"{schedule.get('description', '')}\n\n"
    text += "\n".join(schedule.get("rules", []))
    text += f"\n\n<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫:</b>\n{schedule.get('link', '')}"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_sales_general(),
            disable_web_page_preview=True
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_schedule: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@router.callback_query(F.data == "sales_gen_chats")
async def show_chats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö –æ—Ç–¥–µ–ª–∞."""
    general_info = CONTENT.get("general_info", {})
    chats = general_info.get("chats", {})
    
    text = f"<b>{chats.get('title', 'üí¨ –ß–∞—Ç—ã –æ—Ç–¥–µ–ª–∞')}</b>\n\n"
    
    for chat in chats.get("list", []):
        text += f"<b>{chat.get('name')}</b>\n"
        text += f"üîó {chat.get('link')}\n"
        text += f"üìã <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {chat.get('purpose')}\n\n"
        
        if 'rules' in chat:
            text += "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
            text += "\n".join(chat.get('rules'))
            text += "\n\n"
        
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    
    text += f"{chats.get('important', '')}"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_sales_general(),
            disable_web_page_preview=True
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_chats: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# ========== –û–¢–ö–†–´–¢–ò–ï –ò –ó–ê–ö–†–´–¢–ò–ï –ü–ê–†–ö–ê ==========

@router.callback_query(F.data == "sales_opening")
async def show_opening_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–∫–∞."""
    opening_closing = CONTENT.get("opening_closing", {})
    
    text = (
        f"<b>{opening_closing.get('title', 'üè¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–∫–∞')}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_opening_closing_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_opening_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data == "sales_open_park")
async def show_park_opening(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—é –ø–∞—Ä–∫–∞."""
    opening_closing = CONTENT.get("opening_closing", {})
    opening = opening_closing.get("opening", {})
    
    text = f"<b>{opening.get('title', '‚òÄÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–∫–∞')}</b>\n\n"
    text += f"{opening.get('time', '')}\n\n"
    text += "<b>üìã –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è:</b>\n\n"
    text += "\n".join(opening.get("checklist", []))
    
    text += "\n\n<b>‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
    text += "\n".join(opening.get("common_issues", []))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    video_file = opening.get("video_instruction")
    if video_file:
        video_path = Path(__file__).parent.parent / "content" / "media" / "videos" / video_file
        
        try:
            if video_path.exists():
                await callback.message.answer_video(
                    video=FSInputFile(video_path),
                    caption="üé¨ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—é –ø–∞—Ä–∫–∞"
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
    
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_opening()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_opening()
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_park_opening: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@router.callback_query(F.data == "sales_close_park")
async def show_park_closing(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –ø–∞—Ä–∫–∞."""
    opening_closing = CONTENT.get("opening_closing", {})
    closing = opening_closing.get("closing", {})
    
    text = f"<b>{closing.get('title', 'üåô –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–∫–∞')}</b>\n\n"
    text += f"{closing.get('time', '')}\n\n"
    text += "<b>üìã –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è:</b>\n\n"
    text += "\n".join(closing.get("checklist", []))
    
    text += "\n\n<b>‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>\n"
    text += "\n".join(closing.get("important_notes", []))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    video_file = closing.get("video_instruction")
    if video_file:
        video_path = Path(__file__).parent.parent / "content" / "media" / "videos" / video_file
        
        try:
            if video_path.exists():
                await callback.message.answer_video(
                    video=FSInputFile(video_path),
                    caption="üé¨ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –ø–∞—Ä–∫–∞"
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
    
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_opening()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_opening()
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_park_closing: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# ========== –†–ê–ë–û–¢–ê –° –ö–ê–°–°–û–ô ==========

@router.callback_query(F.data == "sales_cash")
async def show_cash_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π."""
    text = "<b>üí≥ –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–æ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_cash_register_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_cash_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data == "sales_cash_video")
async def send_cash_video(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Å—Å–æ–π."""
    cash_data = CONTENT.get("cash_register", {})
    video_file = cash_data.get("video_instruction")
    
    if video_file:
        video_path = Path(__file__).parent.parent / "content" / "media" / "videos" / video_file
        
        try:
            if video_path.exists():
                await callback.message.answer_video(
                    video=FSInputFile(video_path),
                    caption="üé¨ –ü–æ–ª–Ω–∞—è –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Å—Å–æ–π\n\n"
                            "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã.",
                    reply_markup=get_back_to_cash()
                )
                await callback.answer("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
            else:
                await callback.answer(
                    "–í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    show_alert=True
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
    else:
        await callback.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)


@router.callback_query(F.data.startswith("sales_cash_"))
async def show_cash_instructions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Å—Å–æ–π."""
    section = callback.data.replace("sales_cash_", "")
    
    cash_data = CONTENT.get("cash_register", {})
    section_data = cash_data.get(section, {})
    
    if not section_data:
        await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"<b>{section_data.get('title', '')}</b>\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
    if 'steps' in section_data:
        text += "\n".join(section_data['steps'])
    
    if 'tips' in section_data:
        text += "\n\n<b>üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>\n"
        text += "\n".join(section_data['tips'])
    
    if 'when' in section_data:
        text += f"\n\n<b>‚ö†Ô∏è –ö–æ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å:</b>\n{section_data['when']}"
    
    if 'important' in section_data:
        text += "\n\n<b>‚ùó –í–∞–∂–Ω–æ:</b>\n"
        text += "\n".join(section_data['important'])
    
    if 'errors' in section_data:
        text += "\n\n<b>–¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n\n"
        for error in section_data['errors']:
            text += f"<b>‚ùå {error.get('problem')}</b>\n"
            text += f"‚úÖ –†–µ—à–µ–Ω–∏–µ:\n{error.get('solution')}\n\n"
    
    if 'phone' in section_data:
        text += f"\n\n<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> {section_data['phone']}"
        text += f"\n<b>‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> {section_data.get('hours', '')}"
        if 'what_to_say' in section_data:
            text += f"\n\n{section_data['what_to_say']}"
    
    try:
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_cash()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_cash(),
                disable_web_page_preview=True
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_cash_instructions: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# ========== –†–ê–ë–û–¢–ê –° CRM ==========

@router.callback_query(F.data == "sales_crm")
async def show_crm_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å amoCRM."""
    text = "<b>üìä –†–∞–±–æ—Ç–∞ —Å amoCRM</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_crm_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_crm_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data == "sales_crm_video")
async def send_crm_video(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å CRM."""
    crm_data = CONTENT.get("crm", {})
    video_file = crm_data.get("video_instruction")
    
    if video_file:
        video_path = Path(__file__).parent.parent / "content" / "media" / "videos" / video_file
        
        try:
            if video_path.exists():
                await callback.message.answer_video(
                    video=FSInputFile(video_path),
                    caption="üé¨ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å amoCRM",
                    reply_markup=get_back_to_crm()
                )
                await callback.answer("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
            else:
                await callback.answer("–í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ CRM: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
    else:
        await callback.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)


@router.callback_query(F.data.startswith("sales_crm_"))
async def show_crm_instructions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å CRM."""
    section = callback.data.replace("sales_crm_", "")
    
    crm_data = CONTENT.get("crm", {})
    section_mapping = {
        "login": "login",
        "create": "create_lead",
        "funnel": "funnel_stages",
        "tasks": "tasks",
        "client": "client_card",
        "rules": "rules"
    }
    
    section_key = section_mapping.get(section)
    if not section_key:
        await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    section_data = crm_data.get(section_key, {})
    
    text = f"<b>{section_data.get('title', '')}</b>\n\n"
    
    if 'url' in section_data:
        text += f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {section_data['url']}\n"
    if 'credentials' in section_data:
        text += f"{section_data['credentials']}\n\n"
    if 'description' in section_data:
        text += f"{section_data['description']}\n\n"
    if 'when' in section_data:
        text += f"<b>–ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å:</b>\n{section_data['when']}\n\n"
    
    if 'steps' in section_data:
        text += "<b>–®–∞–≥–∏:</b>\n"
        text += "\n\n".join(section_data['steps'])
    
    if 'stages' in section_data:
        text += "<b>–≠—Ç–∞–ø—ã –≤–æ—Ä–æ–Ω–∫–∏:</b>\n\n"
        for stage in section_data['stages']:
            text += f"<b>{stage.get('name')}</b>\n"
            text += f"{stage.get('description')}\n"
            text += f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ: {stage.get('action')}\n\n"
    
    if 'create_task' in section_data:
        text += "\n".join(section_data['create_task'])
        text += "\n\n"
    
    if 'types' in section_data:
        text += "<b>–¢–∏–ø—ã –∑–∞–¥–∞—á:</b>\n"
        text += "\n".join(section_data['types'])
        text += "\n\n"
    
    if 'deadline' in section_data:
        text += f"{section_data['deadline']}\n\n"
    
    if 'required_fields' in section_data:
        text += "<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:</b>\n"
        text += "\n".join(section_data['required_fields'])
        text += "\n\n"
    
    if 'tags' in section_data:
        text += "\n".join(section_data['tags'])
        text += "\n\n"
    
    if 'must_do' in section_data:
        text += "<b>‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:</b>\n"
        text += "\n".join(section_data['must_do'])
        text += "\n\n"
    
    if 'forbidden' in section_data:
        text += "<b>‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
        text += "\n".join(section_data['forbidden'])
    
    try:
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_crm()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_crm(),
                disable_web_page_preview=True
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_crm_instructions: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# ========== –†–ê–ë–û–¢–ê –° –ì–û–°–¢–Ø–ú–ò ==========

@router.callback_query(F.data == "sales_guests")
async def show_guests_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Å—Ç—è–º–∏."""
    text = "<b>ü§ù –†–∞–±–æ—Ç–∞ —Å –≥–æ—Å—Ç—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_guests_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_guests_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data == "sales_guests_scripts")
async def show_scripts_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂."""
    text = "<b>üí¨ –°–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –ø—Ä–æ–¥–∞–∂–∏:"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_sales_scripts_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_scripts_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("sales_script_"))
async def show_script(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂."""
    script_type = callback.data.replace("sales_script_", "")
    
    guest_data = CONTENT.get("guest_interaction", {})
    scripts = guest_data.get("sales_scripts", {})
    script = scripts.get(script_type, {})
    
    if not script:
        await callback.answer("–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"<b>{script.get('title', '')}</b>\n\n"
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∫—Ä–∏–ø—Ç–∞
    if 'good' in script:
        text += "<b>‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã:</b>\n"
        text += "\n".join(script['good'])
        text += "\n\n"
    
    if 'bad' in script:
        text += "<b>‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã:</b>\n"
        text += "\n".join(script['bad'])
        text += "\n\n"
    
    if 'rules' in script:
        text += "<b>üìã –ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        text += "\n".join(script['rules'])
        text += "\n\n"
    
    if 'questions' in script:
        text += "<b>–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è:</b>\n"
        text += "\n".join(script['questions'])
        text += "\n\n"
    
    if 'listen' in script:
        text += f"{script['listen']}\n\n"
    
    if 'structure' in script:
        text += f"<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞:</b> {script['structure']}\n\n"
    
    if 'examples' in script:
        text += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n\n"
        for example in script['examples']:
            text += f"<b>–£—Å–ª—É–≥–∞:</b> {example.get('service')}\n"
            text += f"‚ùå –ü–ª–æ—Ö–æ: {example.get('bad')}\n"
            text += f"‚úÖ –•–æ—Ä–æ—à–æ: {example.get('good')}\n\n"
    
    if 'emphasis' in script:
        text += "<b>–ù–∞ —á—Ç–æ –¥–µ–ª–∞—Ç—å —É–ø–æ—Ä:</b>\n"
        text += "\n".join(script['emphasis'])
        text += "\n\n"
    
    if 'common' in script:
        text += "<b>–¢–∏–ø–∏—á–Ω—ã–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è:</b>\n\n"
        for obj in script['common']:
            text += f"<b>–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:</b> {obj.get('objection')}\n"
            text += f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {obj.get('wrong')}\n"
            text += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {obj.get('right')}\n\n"
    
    if 'technique' in script:
        text += "<b>–¢–µ—Ö–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:</b>\n"
        text += "\n".join(script['technique'])
        text += "\n\n"
    
    if 'signals' in script:
        text += "\n".join(script['signals'])
        text += "\n\n"
    
    if 'techniques' in script:
        text += "<b>–¢–µ—Ö–Ω–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è:</b>\n\n"
        for tech in script['techniques']:
            text += f"<b>{tech.get('name')}</b>\n"
            text += f"–ü—Ä–∏–º–µ—Ä: {tech.get('example')}\n\n"
    
    if 'final_words' in script:
        text += "<b>–ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Ñ—Ä–∞–∑—ã:</b>\n"
        text += "\n".join(script['final_words'])
        text += "\n\n"
    
    if 'what' in script:
        text += f"{script['what']}\n\n"
    
    if 'when' in script:
        text += f"<b>–ö–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å:</b> {script['when']}\n\n"
    
    if 'examples' in script and script_type in ['upsell', 'crosssell']:
        text += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        text += "\n".join(script['examples'])
        text += "\n\n"
    
    if 'rules' in script and script_type in ['upsell']:
        text += "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        text += "\n".join(script['rules'])
    
    try:
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_scripts()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_scripts()
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_script: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@router.callback_query(F.data == "sales_guests_children")
async def show_children_adults(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ —Å –¥–µ—Ç—å–º–∏ –∏ –≤–∑—Ä–æ—Å–ª—ã–º–∏."""
    guest_data = CONTENT.get("guest_interaction", {})
    children_adults = guest_data.get("children_adults", {})
    
    text = f"<b>{children_adults.get('title', '')}</b>\n\n"
    text += "<b>üë∂ –†–∞–±–æ—Ç–∞ —Å –¥–µ—Ç—å–º–∏:</b>\n"
    text += "\n".join(children_adults.get('children', []))
    text += "\n\n<b>üë®‚Äçüíº –†–∞–±–æ—Ç–∞ —Å–æ –≤–∑—Ä–æ—Å–ª—ã–º–∏:</b>\n"
    text += "\n".join(children_adults.get('adults', []))
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_guests()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_children_adults: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


@router.callback_query(F.data == "sales_guests_contacts")
async def show_contact_collection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±–æ—Ä–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."""
    guest_data = CONTENT.get("guest_interaction", {})
    contacts = guest_data.get("contact_collection", {})
    
    text = f"<b>{contacts.get('title', '')}</b>\n\n"
    text += f"<b>–ó–∞—á–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n{contacts.get('why', '')}\n\n"
    text += "<b>–°–ø–æ—Å–æ–±—ã —Å–±–æ—Ä–∞:</b>\n"
    text += "\n".join(contacts.get('how', []))
    text += f"\n\n<b>üí¨ {contacts.get('script', '')}</b>"
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_back_to_guests()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_contact_collection: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


# ========== –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –û –ú–û–®–ï–ù–ù–ò–ö–ê–• ==========

@router.callback_query(F.data == "sales_fraud")
async def show_fraud_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –æ –º–æ—à–µ–Ω–Ω–∏–∫–∞—Ö."""
    fraud_data = CONTENT.get("fraud_prevention", {})
    
    text = (
        f"<b>{fraud_data.get('title', '')}</b>\n\n"
        f"{fraud_data.get('description', '')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏:"
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_fraud_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_fraud_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("sales_fraud_"))
async def show_fraud_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–µ."""
    fraud_type = callback.data.replace("sales_fraud_", "")
    
    fraud_data = CONTENT.get("fraud_prevention", {})
    
    type_mapping = {
        "money": "fake_money",
        "refund": "refund_scam",
        "aggressive": "aggressive_clients",
        "theft": "theft",
        "freepass": "free_pass"
    }
    
    fraud_key = type_mapping.get(fraud_type)
    if not fraud_key:
        await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    fraud_info = fraud_data.get(fraud_key, {})
    
    text = f"<b>{fraud_info.get('title', '')}</b>\n\n"
    
    if 'how_to_spot' in fraud_info:
        text += "\n".join(fraud_info['how_to_spot'])
        text += "\n\n"
    
    if 'what_to_do' in fraud_info:
        text += "<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
        text += "\n".join(fraud_info['what_to_do'])
        text += "\n\n"
    
    if 'warning' in fraud_info:
        text += f"{fraud_info['warning']}\n\n"
    
    if 'schemes' in fraud_info:
        text += "<b>–¢–∏–ø–∏—á–Ω—ã–µ —Å—Ö–µ–º—ã:</b>\n\n"
        for scheme in fraud_info['schemes']:
            text += f"<b>{scheme.get('name')}</b>\n"
            text += f"{scheme.get('description')}\n\n"
            text += "<b>–ö–∞–∫ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å:</b>\n"
            text += "\n".join(scheme.get('how_to_prevent', []))
            text += "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    
    if 'types' in fraud_info:
        text += "<b>–¢–∏–ø—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
        text += "\n".join(fraud_info['types'])
        text += "\n\n"
    
    if 'what_to_do' in fraud_info and fraud_type == "aggressive":
        text += "\n".join(fraud_info['what_to_do'])
        text += "\n\n"
    
    if 'phrases' in fraud_info:
        phrases = fraud_info['phrases']
        text += "\n".join(phrases.get('good', []))
        text += "\n\n"
        text += "\n".join(phrases.get('bad', []))
        text += "\n\n"
    
    if 'signs' in fraud_info:
        text += "\n".join(fraud_info['signs'])
        text += "\n\n"
    
    if 'prevention' in fraud_info:
        text += "\n".join(fraud_info['prevention'])
    
    try:
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await callback.message.answer(
                        text=part,
                        reply_markup=get_back_to_fraud()
                    )
                else:
                    await callback.message.answer(text=part)
            await callback.message.delete()
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_back_to_fraud()
            )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_fraud_info: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
