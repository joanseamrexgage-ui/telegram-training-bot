version: '3.8'

services:
  # ========== REDIS HIGH AVAILABILITY CLUSTER (PRODUCTION v3.0) ==========
  # BLOCKER-001 FIX: Redis Sentinel для автоматического failover
  # Architecture: 1 Master + 2 Slaves + 3 Sentinels
  # Automatic failover: < 5s downtime при падении master

  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: training_bot_redis_master
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --replica-announce-ip redis-master
    volumes:
      - redis_master_data:/data
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Redis Slave 1
  redis-slave1:
    image: redis:7-alpine
    container_name: training_bot_redis_slave1
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --slaveof redis-master 6379
      --replica-announce-ip redis-slave1
    volumes:
      - redis_slave1_data:/data
    networks:
      - bot_network
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Redis Slave 2
  redis-slave2:
    image: redis:7-alpine
    container_name: training_bot_redis_slave2
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --slaveof redis-master 6379
      --replica-announce-ip redis-slave2
    volumes:
      - redis_slave2_data:/data
    networks:
      - bot_network
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Sentinel 1
  redis-sentinel1:
    image: redis:7-alpine
    container_name: training_bot_sentinel1
    restart: unless-stopped
    command: >
      sh -c "echo 'port 26379
      sentinel monitor mymaster redis-master 6379 2
      sentinel down-after-milliseconds mymaster 5000
      sentinel parallel-syncs mymaster 1
      sentinel failover-timeout mymaster 10000' > /tmp/sentinel.conf &&
      redis-sentinel /tmp/sentinel.conf"
    networks:
      - bot_network
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "sentinel", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Sentinel 2
  redis-sentinel2:
    image: redis:7-alpine
    container_name: training_bot_sentinel2
    restart: unless-stopped
    command: >
      sh -c "echo 'port 26379
      sentinel monitor mymaster redis-master 6379 2
      sentinel down-after-milliseconds mymaster 5000
      sentinel parallel-syncs mymaster 1
      sentinel failover-timeout mymaster 10000' > /tmp/sentinel.conf &&
      redis-sentinel /tmp/sentinel.conf"
    networks:
      - bot_network
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "sentinel", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Sentinel 3
  redis-sentinel3:
    image: redis:7-alpine
    container_name: training_bot_sentinel3
    restart: unless-stopped
    command: >
      sh -c "echo 'port 26379
      sentinel monitor mymaster redis-master 6379 2
      sentinel down-after-milliseconds mymaster 5000
      sentinel parallel-syncs mymaster 1
      sentinel failover-timeout mymaster 10000' > /tmp/sentinel.conf &&
      redis-sentinel /tmp/sentinel.conf"
    networks:
      - bot_network
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "sentinel", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # ========== TELEGRAM BOT ==========
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: training_bot
    restart: unless-stopped

    # Переменные окружения из .env файла
    env_file:
      - .env

    # BLOCKER-001: Redis Sentinel configuration for HA
    environment:
      # Sentinel nodes (comma-separated host:port pairs)
      - REDIS_SENTINEL_NODES=redis-sentinel1:26379,redis-sentinel2:26379,redis-sentinel3:26379
      - REDIS_MASTER_NAME=mymaster
      # Fallback to simple Redis URL (for backward compatibility)
      - REDIS_URL=redis://redis-master:6379

    # Volumes для сохранения данных
    volumes:
      - ./logs:/app/logs                    # Логи
      - ./content:/app/content              # Контент (медиа-файлы)
      - ./training_bot.db:/app/training_bot.db  # SQLite БД (для SQLite)

    # PRODUCTION v3.0: Зависимость от Redis Sentinel Cluster
    depends_on:
      redis-master:
        condition: service_healthy
      redis-sentinel1:
        condition: service_healthy
      redis-sentinel2:
        condition: service_healthy
      redis-sentinel3:
        condition: service_healthy
      # db:
      #   condition: service_healthy

    # Сеть
    networks:
      - bot_network

    # OPS-001 FIX: Enhanced health check
    healthcheck:
      test: ["CMD-SHELL", "python /app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s  # Дать время на инициализацию БД и Redis

  # ========== POSTGRESQL DATABASE (опционально) ==========
  # Раскомментируйте этот блок если используете PostgreSQL
  # db:
  #   image: postgres:15-alpine
  #   container_name: training_bot_db
  #   restart: unless-stopped
  #   
  #   environment:
  #     POSTGRES_DB: ${DB_NAME}
  #     POSTGRES_USER: ${DB_USER}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   
  #   ports:
  #     - "5432:5432"
  #   
  #   networks:
  #     - bot_network
  #   
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # ========== ADMINER (опционально) ==========
  # Web-интерфейс для управления базой данных
  # adminer:
  #   image: adminer:latest
  #   container_name: training_bot_adminer
  #   restart: unless-stopped
  #   
  #   ports:
  #     - "8080:8080"
  #   
  #   networks:
  #     - bot_network
  #   
  #   depends_on:
  #     - db

# ========== NETWORKS ==========
networks:
  bot_network:
    driver: bridge

# ========== VOLUMES ==========
volumes:
  # PRODUCTION v3.0: Redis HA Cluster data persistence
  redis_master_data:
    driver: local
  redis_slave1_data:
    driver: local
  redis_slave2_data:
    driver: local
  # Для PostgreSQL (раскомментируйте если используете)
  # postgres_data:
  #   driver: local
