version: '3.8'

services:
  # ========== REDIS (PRODUCTION v2.1) ==========
  # CRIT-002, CRIT-003, OPS-002 FIX: Redis для FSM и rate limiting
  redis:
    image: redis:7-alpine
    container_name: training_bot_redis
    restart: unless-stopped

    # Redis configuration
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes

    # Volumes для персистентности
    volumes:
      - redis_data:/data

    # Сеть
    networks:
      - bot_network

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ========== TELEGRAM BOT ==========
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: training_bot
    restart: unless-stopped

    # Переменные окружения из .env файла
    env_file:
      - .env

    # Override Redis URL for Docker network
    environment:
      - REDIS_URL=redis://redis:6379

    # Volumes для сохранения данных
    volumes:
      - ./logs:/app/logs                    # Логи
      - ./content:/app/content              # Контент (медиа-файлы)
      - ./training_bot.db:/app/training_bot.db  # SQLite БД (для SQLite)

    # PRODUCTION v2.1: Зависимость от Redis
    depends_on:
      redis:
        condition: service_healthy
      # db:
      #   condition: service_healthy

    # Сеть
    networks:
      - bot_network

    # OPS-001 FIX: Enhanced health check
    healthcheck:
      test: ["CMD-SHELL", "python /app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s  # Дать время на инициализацию БД и Redis

  # ========== POSTGRESQL DATABASE (опционально) ==========
  # Раскомментируйте этот блок если используете PostgreSQL
  # db:
  #   image: postgres:15-alpine
  #   container_name: training_bot_db
  #   restart: unless-stopped
  #   
  #   environment:
  #     POSTGRES_DB: ${DB_NAME}
  #     POSTGRES_USER: ${DB_USER}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   
  #   ports:
  #     - "5432:5432"
  #   
  #   networks:
  #     - bot_network
  #   
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # ========== ADMINER (опционально) ==========
  # Web-интерфейс для управления базой данных
  # adminer:
  #   image: adminer:latest
  #   container_name: training_bot_adminer
  #   restart: unless-stopped
  #   
  #   ports:
  #     - "8080:8080"
  #   
  #   networks:
  #     - bot_network
  #   
  #   depends_on:
  #     - db

# ========== NETWORKS ==========
networks:
  bot_network:
    driver: bridge

# ========== VOLUMES ==========
volumes:
  # PRODUCTION v2.1: Redis data persistence
  redis_data:
    driver: local
  # Для PostgreSQL (раскомментируйте если используете)
  # postgres_data:
  #   driver: local
