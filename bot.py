"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –û–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö handlers –∏ middlewares
- –ù–∞—Å—Ç—Ä–æ–π–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- –ó–∞–ø—É—Å–∫ polling
"""

import asyncio
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from redis.asyncio import Redis

# BLOCKER-001: Redis Sentinel HA support
from utils.redis_manager import init_redis_manager, RedisSentinelManager

# BLOCKER-002 FIX: Redis-backed password attempt tracking
from utils.auth_security import init_auth_security

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from config import load_config
from database.database import init_db, close_db
from handlers import start, general_info, sales, sport, admin, common
from middlewares.auth import AuthMiddleware
from middlewares.logging_v2 import AsyncLoggingMiddleware  # CRIT-004 FIX: v2.0
from middlewares.throttling_v2 import create_redis_throttling, RateLimitConfig  # CRIT-002 FIX: v2.0
from middlewares.errors import ErrorHandlingMiddleware  # VERSION 2.0
from middlewares.timeout import TimeoutMiddleware  # HIGH-004 FIX: Timeout protection
from middlewares.input_sanitizer import InputSanitizerMiddleware  # TASK 1.3: Input validation
from utils.logger import logger
# PRODUCTION MONITORING: Sentry integration for error tracking
from utils.sentry_config import init_sentry


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env
    2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    3. –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Bot –∏ Dispatcher
    4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç middlewares
    5. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers
    6. –ó–∞–ø—É—Å–∫–∞–µ—Ç polling
    """
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")

    # PRODUCTION MONITORING: Initialize Sentry for error tracking
    init_sentry(
        enable_performance=True,
        enable_profiling=False,
        traces_sample_rate=0.1,  # Sample 10% of transactions
        profiles_sample_rate=0.0  # Disable profiling by default
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        config = load_config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # ARCH-003 FIX: Connection pooling configuration
    try:
        await init_db(
            database_url=config.db.url,
            echo=config.db.echo,
            pool_size=config.db.pool_size,
            max_overflow=config.db.max_overflow,
            pool_timeout=config.db.pool_timeout,
            pool_recycle=config.db.pool_recycle
        )
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å connection pooling")
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot = Bot(
        token=config.tg_bot.token,
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        )
    )

    # BLOCKER-001 FIX: Redis FSM Storage —Å Sentinel HA support
    storage = None
    redis_manager = None

    try:
        if config.redis.is_sentinel_mode:
            # BLOCKER-001: Use Sentinel HA cluster
            logger.info(
                f"üîÑ Initializing Redis Sentinel HA cluster...\n"
                f"   Nodes: {config.redis.sentinel_nodes}\n"
                f"   Master: {config.redis.master_name}"
            )

            redis_manager = await init_redis_manager(
                sentinels=config.redis.sentinel_nodes,
                master_name=config.redis.master_name,
                db=config.redis.fsm_db,
                socket_timeout=5.0,
                max_connections=50,
                enable_circuit_breaker=True
            )

            # Get Redis connection from Sentinel manager
            redis_fsm = await redis_manager.get_redis()

            storage = RedisStorage(
                redis=redis_fsm,
                key_builder=DefaultKeyBuilder(with_destiny=True)
            )
            logger.info(
                f"‚úÖ Redis FSM Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Sentinel HA\n"
                f"   Master: {config.redis.master_name}\n"
                f"   Sentinels: {len(config.redis.sentinel_nodes)} nodes\n"
                f"   Circuit Breaker: ENABLED"
            )

            # BLOCKER-002 FIX: Initialize AuthSecurity with Redis backend
            init_auth_security(redis_fsm)
            logger.info("‚úÖ AuthSecurity initialized with Redis Sentinel backend")

        else:
            # Simple Redis mode (development)
            redis_fsm = Redis.from_url(
                f"{config.redis.url}/{config.redis.fsm_db}",
                decode_responses=True
            )
            # Test connection
            await redis_fsm.ping()

            storage = RedisStorage(
                redis=redis_fsm,
                key_builder=DefaultKeyBuilder(with_destiny=True)
            )
            logger.info(
                f"‚úÖ Redis FSM Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (simple mode): {config.redis.url}/{config.redis.fsm_db}"
            )

            # BLOCKER-002 FIX: Initialize AuthSecurity with Redis backend
            init_auth_security(redis_fsm)
            logger.info("‚úÖ AuthSecurity initialized with Redis backend")

    except Exception as e:
        logger.error(
            f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}\n"
            f"   Fallback –Ω–∞ MemoryStorage (—Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É–¥—É—Ç —Ç–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ!)"
        )
        storage = MemoryStorage()

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å Redis FSM —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    dp = Dispatcher(storage=storage)
    
    # ARCH-001: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–û–†–Ø–î–û–ö MIDDLEWARES
    # ========================================
    # –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!
    #
    # Execution Order (outer ‚Üí inner):
    # 0. Timeout         ‚Üí –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–µ event loop (–∑–∞—â–∏—Ç–∞ –æ—Ç DoS)
    # 1. Throttling      ‚Üí –ë–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ø–∞–º –î–û –ª—é–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∑–∞—â–∏—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)
    # 2. InputSanitizer  ‚Üí –û—á–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS/injection)
    # 3. Auth            ‚Üí –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç—Ä–µ–±—É–µ—Ç DB)
    # 4. ErrorHandling   ‚Üí –õ–æ–≤–∏—Ç –æ—à–∏–±–∫–∏ –∏–∑ handlers –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö middleware
    # 5. Logging         ‚Üí –õ–æ–≥–∏—Ä—É–µ—Ç –£–°–ü–ï–®–ù–´–ï –∑–∞–ø—Ä–æ—Å—ã (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
    #
    # –ù–ò–ö–û–ì–î–ê –ù–ï –ú–ï–ù–Ø–ô–¢–ï –ü–û–†–Ø–î–û–ö –ë–ï–ó –ü–û–õ–ù–û–ì–û –ü–û–ù–ò–ú–ê–ù–ò–Ø –ü–û–°–õ–ï–î–°–¢–í–ò–ô!
    # –°–º. tests/test_middleware_order.py –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

    # 0. HIGH-004 FIX: Timeout Protection (MUST BE FIRST!)
    timeout_middleware = TimeoutMiddleware(timeout=30)
    dp.message.middleware(timeout_middleware)
    dp.callback_query.middleware(timeout_middleware)
    logger.info("‚úÖ Timeout middleware registered (30s timeout)")

    # 1. BLOCKER-001 & CRIT-002 & SEC-002 FIX: Redis Token Bucket Throttling —Å Sentinel support
    try:
        if config.redis.is_sentinel_mode:
            # BLOCKER-001: Use Sentinel HA cluster for throttling
            from middlewares.throttling_v2 import ThrottlingMiddlewareV2, RateLimitConfig

            # Initialize separate Sentinel manager for throttling (different DB)
            throttle_manager = await init_redis_manager(
                sentinels=config.redis.sentinel_nodes,
                master_name=config.redis.master_name,
                db=config.redis.throttle_db,
                socket_timeout=5.0,
                max_connections=50,
                enable_circuit_breaker=True
            )

            # Get Redis connection from Sentinel manager
            throttle_redis = await throttle_manager.get_redis()

            # Create middleware with Sentinel-backed Redis
            # UX-001 FIX: "Invisible" throttling - user-friendly rate limits
            throttle_config = RateLimitConfig(
                max_tokens=15,              # Burst: 15 requests (was: 5)
                refill_rate=2.0,           # Recovery: 2 req/sec (was: 0.5)
                violation_threshold=8,      # Warnings: 8 (was: 3)
                block_duration=10          # Block: 10 sec (was: 60)
            )

            throttling_middleware = ThrottlingMiddlewareV2(
                redis=throttle_redis,
                config=throttle_config,
                admin_ids=config.tg_bot.admin_ids  # UX-001: Admins bypass rate limiting
            )

            dp.message.middleware(throttling_middleware)
            dp.callback_query.middleware(throttling_middleware)

            logger.info(
                f"‚úÖ Redis Throttling Middleware –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Sentinel HA\n"
                f"   Master: {config.redis.master_name}\n"
                f"   Circuit Breaker: ENABLED"
            )

        else:
            # Simple Redis mode (development)
            # UX-001 FIX: "Invisible" throttling - user-friendly rate limits
            throttling_middleware = await create_redis_throttling(
                redis_url=f"{config.redis.url}/{config.redis.throttle_db}",
                max_tokens=15,              # Burst: 15 requests (was: 5)
                refill_rate=2.0,           # Recovery: 2 req/sec (was: 0.5)
                violation_threshold=8,      # Warnings: 8 (was: 3)
                block_duration=10,         # Block: 10 sec (was: 60)
                admin_ids=config.tg_bot.admin_ids  # UX-001: Admins bypass rate limiting
            )
            dp.message.middleware(throttling_middleware)
            dp.callback_query.middleware(throttling_middleware)
            logger.info("‚úÖ Redis Throttling Middleware –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (simple mode)")

    except Exception as e:
        logger.error(
            f"‚ö†Ô∏è Throttling Middleware –ù–ï–î–û–°–¢–£–ü–ï–ù: {e}\n"
            f"   –ë–æ—Ç –ù–ï –∑–∞—â–∏—â–µ–Ω –æ—Ç —Å–ø–∞–º–∞!"
        )

    # 2. TASK 1.3: Input Sanitizer Middleware - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞
    input_sanitizer = InputSanitizerMiddleware(
        max_text_length=4096,      # Telegram message limit
        max_callback_length=64,    # Callback data limit
        enable_logging=True,
        enable_stats=True
    )
    dp.message.middleware(input_sanitizer)
    dp.callback_query.middleware(input_sanitizer)
    logger.info("‚úÖ Input Sanitizer Middleware –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (XSS/injection protection)")

    # 3. Auth Middleware - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dp.message.middleware(AuthMiddleware())
    dp.callback_query.middleware(AuthMiddleware())

    # 4. Error Handling Middleware - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    dp.message.middleware(ErrorHandlingMiddleware())
    dp.callback_query.middleware(ErrorHandlingMiddleware())

    # 5. BLOCKER-004 & CRIT-004 FIX: Async Logging Middleware (non-blocking + memory safe)
    async_logging = AsyncLoggingMiddleware(
        enable_performance_tracking=True,
        max_concurrent_tasks=500,  # BLOCKER-004: Prevent unbounded task growth
        cleanup_interval=60  # Cleanup every 60 seconds
    )
    dp.message.middleware(async_logging)
    dp.callback_query.middleware(async_logging)

    logger.info("‚úÖ All Production Middlewares –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã (v3.0 Enterprise)")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
    # –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    dp.include_router(start.router)
    dp.include_router(general_info.router)
    dp.include_router(sales.router)
    dp.include_router(sport.router)
    dp.include_router(admin.router)
    dp.include_router(common.router)  # –û–±—â–∏–µ handlers (–Ω–∞–∑–∞–¥, –ø–æ–º–æ—â—å) - –ü–û–°–õ–ï–î–ù–ò–ú–ò!
    
    logger.info("‚úÖ Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # VERSION 2.0: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    @dp.errors()
    async def global_error_handler(event, exception):
        """
        –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–π–º–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫

        –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –æ—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ middleware –∏–ª–∏ handler.
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Sentry.
        """
        from aiogram.types import Update, ErrorEvent

        logger.exception(
            f"üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:\n"
            f"  –¢–∏–ø: {type(exception).__name__}\n"
            f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {str(exception)}\n"
            f"  Update: {event.update if hasattr(event, 'update') else 'N/A'}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Sentry –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            from utils.sentry_config import capture_exception_with_context

            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            user_id = None
            if hasattr(event, 'update') and isinstance(event.update, Update):
                if event.update.message and event.update.message.from_user:
                    user_id = event.update.message.from_user.id
                elif event.update.callback_query and event.update.callback_query.from_user:
                    user_id = event.update.callback_query.from_user.id

            capture_exception_with_context(
                exception=exception,
                user_id=user_id,
                extra={
                    "event_type": type(event).__name__,
                    "update_id": event.update.update_id if hasattr(event, 'update') else None,
                }
            )
        except Exception as sentry_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Sentry: {sentry_error}")

        return True  # –ü–æ–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
        logger.info(f"   ID: {bot_info.id}")
        logger.info(f"   –ò–º—è: {bot_info.first_name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("‚úÖ –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    
    logger.info("=" * 50)
    logger.info("ü§ñ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï")
    logger.info("=" * 50)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types()
        )
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

        # BLOCKER-004: Shutdown async logging middleware (cleanup tasks)
        try:
            await async_logging.shutdown()
        except Exception as e:
            logger.error(f"Error shutting down logging middleware: {e}")

        # BLOCKER-001: Close Redis Sentinel managers if initialized
        if redis_manager:
            try:
                await redis_manager.close()
                logger.info("‚úÖ Redis Sentinel FSM manager closed")
            except Exception as e:
                logger.error(f"Error closing Redis FSM manager: {e}")

        # Note: throttle_manager is in different scope, handled by middleware cleanup

        await close_db()
        await bot.session.close()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç asyncio.run() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Ctrl+C –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.critical(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
